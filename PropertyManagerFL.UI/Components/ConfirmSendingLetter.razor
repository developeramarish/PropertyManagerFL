@using PropertyManagerFL.Application.Interfaces.Services.AppManager;
@using PropertyManagerFL.Application.Shared.Enums;
@using PropertyManagerFL.Application.ViewModels.Arrendamentos;
@using PropertyManagerFL.Application.ViewModels.Recebimentos;
@using Syncfusion.Blazor.Buttons
@using Microsoft.Extensions.Localization
@using static PropertyManagerFL.Application.Shared.Enums.AppDefinitions;

@inject IArrendamentoService LeasesService
@inject IRecebimentoService PaymentsService
@inject IStringLocalizer<App> L


<SfDialog CssClass="quick-info-header"
          Width="@DialogWidth"
          Height="@DialogHeight"
          CloseOnEscape="false"
          Visible="@Visible"
          IsModal="true"
          AllowDragging="true"
          ShowCloseIcon="false">
    <DialogTemplates>
        <Header>
            <div class="ml-1 mr-1 font-weight-bold" style="color:@TitleColor">@DialogTitle</div>
        </Header>
        <Content>
            @if (!string.IsNullOrEmpty(TenantName))
            {
                <div class="m-2"> [ <span style="color:black; font-style:italic; font-weight:bold">@TenantName</span> ]</div>
                <hr style="color:black" />
            }
            <div class="row mx-2 mb-2">
                <div class="col-9">
                    <div>
                        @if (!string.IsNullOrEmpty(WarningMessage))
                        {
                            <SfMessage Variant="MessageVariant.Filled" CssClass="mb-1"
                                       Severity=MessageSeverity.Error ShowIcon=false
                                       ShowCloseIcon="false">@WarningMessage</SfMessage>
                        }
                        <hr style="color:black" />

                        <SfMessage Severity=@MessageSeverityType ShowIcon="false" ShowCloseIcon="false">@AlertMessage</SfMessage>

                        </div>
                    </div>
                    <RightSideImageComponent Operation="@IconType" />
                </div>
            </Content>
            <FooterTemplate>
                <hr />
                <div>
                    <SfButton CssClass="@OkButtonColor" IconCss="fas fa-warning"
                              @onclick="OnConfirmYes" Content="@L["Sim"]">
                    </SfButton>
                    <SfButton CssClass="e-outline e-round-corner" IconCss="fas fa-times"
                              @onclick="OnConfirmNo" Content="@L["Nao"]">
                    </SfButton>
                </div>
            </FooterTemplate>
        </DialogTemplates>
        <DialogPositionData X="center" Y="center"></DialogPositionData>
        <DialogAnimationSettings Effect="@Effects" Duration=600></DialogAnimationSettings>
    </SfDialog>



    @code {
    [Parameter] public string? DialogTitle { get; set; }
    [Parameter] public string? TenantName { get; set; } = string.Empty;
    [Parameter] public ArrendamentoVM? Lease { get; set; }

    [Parameter] public EventCallback<DocumentoEmitido> OnConfirmationYes { get; set; }
    [Parameter] public EventCallback OnConfirmationNo { get; set; }
    [Parameter] public AppDefinitions.AlertMessageType AlertMessageType { get; set; } = AppDefinitions.AlertMessageType.Warning;
    [Parameter] public AppDefinitions.OpcoesRegisto IconType { get; set; } = AppDefinitions.OpcoesRegisto.Warning;
    [Parameter] public string? DialogWidth { get; set; } = "25%";
    [Parameter] public string? DialogHeight { get; set; } = "auto";
    [Parameter] public bool Visible { get; set; } = false;
    [Parameter] public MessageSeverity MessageSeverityType { get; set; } = MessageSeverity.Warning;
    [Parameter] public DocumentoEmitido LetterType { get; set; }

    protected string SubTitle { get; set; } = string.Empty;
    protected string WarningMessage { get; set; } = string.Empty;

    private string? TitleColor { get; set; } = "cornflowerblue";
    private string? OkButtonColor { get; set; } = "e-danger e-round-corner";

    private string? cssClass;
    private DialogEffect Effects = DialogEffect.FadeZoom;
    private string? AlertMessage { get; set; }
    private Dictionary<string, object> ErrorTextBox_Rows = new Dictionary<string, object>()
{
        {"rows", 2}
    };

    protected override void OnInitialized()
    {
        cssClass = "notify-info";
        TitleColor = "cornflowerblue";
    }

    protected override async Task OnParametersSetAsync()
    {
        string? alertMsg = "";
        SubTitle = "";
        WarningMessage = "";
        switch (AlertMessageType)
        {
            case AppDefinitions.AlertMessageType.Error:
                cssClass = "notify-error";
                TitleColor = "Red";
                break;
            case AppDefinitions.AlertMessageType.Warning:
                cssClass = "notify-warning";
                TitleColor = "#cc3300";
                OkButtonColor = "e-warning e-round-corner";
                break;
            case AppDefinitions.AlertMessageType.Info:
                cssClass = "notify-info";
                TitleColor = "cornflowerblue";
                OkButtonColor = "e-info e-round-corner";
                break;
            default:
                cssClass = "notify-warning";
                TitleColor = "Red";
                break;
        }

        switch (LetterType)
        {
            case DocumentoEmitido.AtualizacaoRendas:
                alertMsg = "carta de atualização de rendas?";
                break;
            case DocumentoEmitido.AtualizacaoManualRenda:
                alertMsg = "carta de atualização de rendas para o inquilino?";
                break;
            case DocumentoEmitido.RendasEmAtraso:
                alertMsg = "carta de aviso de renda(s) em atraso?";
                break;
            case DocumentoEmitido.ContratoArrendamento:
                alertMsg = "contrato de arrendamento?";
                break;
            case DocumentoEmitido.OposicaoRenovacaoContrato:
                if (Lease is null) return;

                alertMsg = "carta de oposição de renovação do contrato?";
                SubTitle = "Oposição de renovação do contrato";

                var monthsToEnd = GetMonthDifference(DateTime.Now, Lease!.Data_Fim);
                var tenantId = Lease.ID_Inquilino;

                IEnumerable<RecebimentoVM> payments = (await PaymentsService.GetAll()).ToList();
                var tenantPayments = payments.Where(p => p.ID_Inquilino == tenantId && p.Estado == 3);
                var hasDeletedPayments = tenantPayments.Count() > 0;

                if (monthsToEnd < 4 && hasDeletedPayments == false)
                {
                    WarningMessage += $"Ainda faltam {monthsToEnd} meses para terminar o contrato ";
                }
                if (monthsToEnd > 4 && hasDeletedPayments)
                {
                    WarningMessage += $" Há indicação de rendas não pagas, mas ainda faltam  {monthsToEnd} meses para terminar o contrato!) ";
                }
                if (hasDeletedPayments == false)
                {
                    WarningMessage += "Não há indicação de rendas por pagar ";
                }
                if (hasDeletedPayments)
                {
                    string dummyText = tenantPayments.Count() == 1 ? "renda não paga " : "rendas não pagas ";
                    WarningMessage += $"Há indicação de {tenantPayments.Count()} {dummyText})";
                }
                break;
        }

        AlertMessage = $"Emite {alertMsg}";

    }

    private int GetMonthDifference(DateTime startDate, DateTime endDate)
    {
        if (endDate.Date < startDate.Date)
        {
            return 0;
        }

        int monthsApart = 12 * (startDate.Year - endDate.Year) + startDate.Month - endDate.Month;
        return Math.Abs(monthsApart);
    }


    protected void OnConfirmYes()
    {
        OnConfirmationYes.InvokeAsync(LetterType);
    }
    protected void OnConfirmNo()
    {
        OnConfirmationNo.InvokeAsync();
    }

}

<style type="text/css" scoped>

    .card-box {
        padding: 5px;
        -webkit-border-radius: 5px;
        border-radius: 25px;
        -moz-border-radius: 5px;
        background-clip: padding-box;
        margin-bottom: 0px;
        background-color: #ffffff;
        box-shadow: 0 0px 12px 0 rgba(0, 0, 0, 0.06), 0 1px 0px 0 rgba(0, 0, 0, 0.02);
    }

    @@import url('//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css');

    .notify-info, .notify-success, .notify-warning, .notify-error {
        padding: 5px;
        margin: 6px 4px 6px 4px;
        box-shadow: 1px 1px 3px #888;
    }

        .notify-info:before, .notify-success:before, .notify-warning:before, .notify-error:before {
            font-family: FontAwesome;
            font-style: normal;
            font-weight: 400;
            speak: none;
            display: inline-block;
            text-decoration: inherit;
            width: 1em;
            margin-right: .2em;
            text-align: center;
            font-variant: normal;
            text-transform: none;
            line-height: 1em;
            margin-left: .2em;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale
        }

        .notify-info:before {
            content: "\f05a";
        }

        .notify-success:before {
            content: '\f00c';
        }

        .notify-warning:before {
            content: '\f071';
        }

        .notify-error:before {
            content: '\f057';
        }

    .notify-info {
        color: #00529B;
        background-color: #BDE5F8;
    }

    .notify-success {
        color: #4F8A10;
        background-color: #DFF2BF;
    }

    .notify-warning {
        color: #9F6000;
        background-color: #FEEFB3;
    }

    .notify-error {
        color: #D8000C;
        background-color: #FFD2D2;
    }

    /*Syncfusion*/
    .e-btn.e-flat.e-primary, .e-btn.e-flat.e-primary:focus {
        background-color: #317ab9;
        border-color: #265f91;
        color: #fff;
    }

        .e-btn.e-flat.e-primary:hover, .e-btn.e-flat.e-primary:active {
            background-color: #21527d;
            border-color: #163854;
            color: #fff;
        }

    .close-icon {
        width: 24px;
        height: 24px;
        position: relative;
        display: inline-block;
    }

    .error-msg {
        color: #66afe9;
        display: inline-block;
        position: relative;
        top: -20px;
        left: 10px;
    }

    .error-detail {
        position: relative;
        left: 56px;
        margin: 0 0 21px;
    }

    .e-icons.close-icon.col-lg-2:before {
        content: '\e761';
        font-size: 32px;
        color: #d9534f;
        position: relative;
        left: 1px;
        bottom: 10px;
    }

    .e-dialog .e-footer-content {
        background-color: #f8f8f8;
    }

    .e-dialog.e-control.e-popup, .e-dialog.e-control.e-popup .e-dlg-header-content {
        background-color: #d9edf7;
    }

    .e-dialog.e-control.e-popup {
        padding: 3px;
    }

    .e-dialog.e-control .e-dlg-header-content {
        padding: 10px;
    }

    .e-dialog.e-control .e-footer-content {
        padding: 8px 12px;
    }

    .e-dialog.e-control .e-dlg-content {
        padding: 15px 0 0;
    }

    .msg-wrapper.col-lg-12 {
        margin-top: 20px;
    }
</style>
