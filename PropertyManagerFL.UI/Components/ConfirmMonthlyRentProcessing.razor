@using PropertyManagerFL.Application.Shared.Enums;
@using Syncfusion.Blazor.Buttons
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<App> L


<SfDialog CssClass="quick-info-header"
          Width="@DialogWidth"
          Height="@DialogHeight"
          CloseOnEscape="false"
          Visible="@Visible"
          AllowDragging="true"
          IsModal="true"
          ShowCloseIcon="false">
    <DialogTemplates>
        <Header>
            <div class="ml-1 mr-1 font-weight-bold" style="color:@TitleColor">@L[DialogTitle]</div>
        </Header>
        <Content>
            <div class="group-box m-2 p-2">
                <SfComboBox TValue="int" TItem="Mes" Placeholder="Mês"
                            FloatLabelType="FloatLabelType.Always" ShowClearButton="false" @bind-Value="SelectedMonth"
                            DataSource="@MonthList">
                    <ComboBoxFieldSettings Text="Descricao" Value="Id" />
                    <ComboBoxEvents TItem="Mes" TValue="int"
                                    ValueChange="MonthChangeHandler" />
                </SfComboBox>
                <SfComboBox TValue="int" TItem="Ano" Placeholder="Ano"
                            FloatLabelType="FloatLabelType.Always" ShowClearButton="false" @bind-Value="SelectedYear"
                            DataSource="@YearsList">
                    <ComboBoxFieldSettings Text="Descricao" Value="Id" />
                    <ComboBoxEvents TItem="Ano" TValue="int"
                                    ValueChange="YearChangeHandler" />
                </SfComboBox>
            </div>

            <div hidden="@HideMessage" class="row mx-2 my-2">
                <div class="col-9">
                    <div>
                        <SfMessage Severity=MessageSeverityType Variant="MessageVariant.Text" ShowIcon="false" ShowCloseIcon="false">@AlertMessage</SfMessage>
                    </div>
                </div>
                <RightSideImageComponent Operation="@IconType" />
            </div>
        </Content>
        <FooterTemplate>
            <hr />
            <div>
                <SfButton CssClass="@OkButtonColor" IconCss="fas fa-check"
                          @onclick="OnConfirmYes" Content="@L["Sim"]">
                </SfButton>
                <SfButton CssClass="e-outline e-round-corner" IconCss="fas fa-times"
                          @onclick="OnConfirmNo" Content="@L["Nao"]">
                </SfButton>
            </div>
        </FooterTemplate>
    </DialogTemplates>
    <DialogPositionData X="@PositionX" Y="@PositionY"></DialogPositionData>
    <DialogAnimationSettings Effect="@Effects" Duration=600></DialogAnimationSettings>
</SfDialog>



@code {
    [Parameter] public string? DialogTitle { get; set; }
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public EventCallback<EventCallbackArgs> OnConfirmationYes { get; set; }
    [Parameter] public EventCallback OnConfirmationNo { get; set; }
    [Parameter] public AppDefinitions.AlertMessageType AlertMessageType { get; set; } = AppDefinitions.AlertMessageType.Info;
    [Parameter] public AppDefinitions.OpcoesRegisto IconType { get; set; } = AppDefinitions.OpcoesRegisto.Info;
    [Parameter] public string DialogWidth { get; set; } = "25%";
    [Parameter] public string DialogHeight { get; set; } = "auto";
    [Parameter] public bool Visible { get; set; } = false;
    [Parameter] public MessageSeverity MessageSeverityType { get; set; } = MessageSeverity.Info;
    [Parameter] public string? PositionX { get; set; } = "center";
    [Parameter] public string? PositionY { get; set; } = "center";

    protected EventCallbackArgs args { get; set; }

    private string TitleColor { get; set; } = "cornflowerblue";
    private string OkButtonColor { get; set; } = "e-danger e-round-corner";
    private string? AlertMessage = "";
    private bool HideMessage = false;

    private string cssClass;
    private DialogEffect Effects = DialogEffect.FadeZoom;

    protected SfComboBox<int, string?>? cboMeses { get; set; }
    protected SfComboBox<int, string?>? cboAnos { get; set; }

    protected int SelectedMonth { get; set; } = DateTime.Now.Month + 1;
    protected int SelectedYear { get; set; } = DateTime.Now.Year;

    protected List<Mes> MonthList { get; set; } = new();
    protected List<Ano> YearsList { get; set; } = new();

    public class EventCallbackArgs
    {
        public int ProcessingMonth { get; set; }
        public int ProcessingYear{ get; set; }
    }

    private Dictionary<string, object> ErrorTextBox_Rows = new Dictionary<string, object>()
{
        {"rows", 2}
    };

    protected override void OnInitialized()
    {
        cssClass = "notify-info";
        TitleColor = "cornflowerblue";
        MonthList = GetMonths();
        YearsList = GetYears();

    }

    protected override void OnParametersSet()
    {
        switch (AlertMessageType)
        {
            case AppDefinitions.AlertMessageType.Error:
                cssClass = "notify-error";
                TitleColor = "Red";
                break;
            case AppDefinitions.AlertMessageType.Warning:
                cssClass = "notify-warning";
                TitleColor = "#cc3300";
                OkButtonColor = "e-warning e-round-corner";
                break;
            case AppDefinitions.AlertMessageType.Info:
                cssClass = "notify-info";
                TitleColor = "cornflowerblue";
                OkButtonColor = "e-info e-round-corner";
                break;
            default:
                cssClass = "notify-warning";
                TitleColor = "Red";
                break;
        }

        var MesageCaption = $"{MonthList.FirstOrDefault(p => p.Id == SelectedMonth).Descricao} de {YearsList.FirstOrDefault(y => y.Id == SelectedYear).Descricao}";
        AlertMessage = $"Confirma processamento para  {MesageCaption}?";
        StateHasChanged();
    }

    protected void OnConfirmYes()
    {
        args = new EventCallbackArgs {  ProcessingMonth = SelectedMonth, ProcessingYear= SelectedYear};
        OnConfirmationYes.InvokeAsync(args);
    }
    protected void OnConfirmNo()
    {
        OnConfirmationNo.InvokeAsync();
    }

    protected void MonthChangeHandler(ChangeEventArgs<int, Mes> args)
    {
        SelectedMonth = args.Value;
        var strSelectedMonth = $"{args.ItemData.Descricao} de {SelectedYear.ToString()}";
        AlertMessage = $"Confirma processamento para  {strSelectedMonth}?";
        HideMessage = false;
        StateHasChanged();
    }
    protected void YearChangeHandler(ChangeEventArgs<int, Ano> args)
    {
        SelectedYear = args.Value;
        var strSelectedYear = $"{SelectedMonth.ToString()} de  {args.ItemData.Descricao}";
        HideMessage = false;
        AlertMessage = $"Confirma processamento para  {SelectedYear}?";
        StateHasChanged();

    }

    protected class Mes
    {
        public string? Descricao { get; set; }
        public int Id { get; set; }
    }
    protected class Ano
    {
        public string? Descricao { get; set; }
        public int Id { get; set; }
    }


    protected List<Mes> GetMonths()
    {
        return new List<Mes>
        {
            new Mes { Id = 1, Descricao = "Janeiro" },
            new Mes { Id = 2, Descricao = "Fevereiro" },
            new Mes { Id = 3, Descricao = "Março" },
            new Mes { Id = 4, Descricao = "Abril" },
            new Mes { Id = 5, Descricao = "Maio" },
            new Mes { Id = 6, Descricao = "Junho" },
            new Mes { Id = 7, Descricao = "Julho" },
            new Mes { Id = 8, Descricao = "Agosto" },
            new Mes { Id = 9, Descricao = "Setembro" },
            new Mes { Id = 10, Descricao = "Outubro" },
            new Mes { Id = 11, Descricao = "Novembro" },
            new Mes { Id = 12, Descricao = "Dezembro" }
        };
    }
    protected List<Ano> GetYears()
    {
        return new List<Ano>
        {
            new Ano{ Id = DateTime.Now.Year, Descricao= DateTime.Now.Year.ToString()},
            new Ano{ Id = DateTime.Now.AddYears(-1).Year, Descricao= DateTime.Now.AddYears(-1).Year.ToString()},
            new Ano{ Id = DateTime.Now.AddYears(-2).Year, Descricao= DateTime.Now.AddYears(-2).Year.ToString()},
        };
    }
}

<style type="text/css" scoped>

    .card-box {
        padding: 5px;
        -webkit-border-radius: 5px;
        border-radius: 25px;
        -moz-border-radius: 5px;
        background-clip: padding-box;
        margin-bottom: 0px;
        background-color: #ffffff;
        box-shadow: 0 0px 12px 0 rgba(0, 0, 0, 0.06), 0 1px 0px 0 rgba(0, 0, 0, 0.02);
    }

    @@import url('//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css');

    .notify-info, .notify-success, .notify-warning, .notify-error {
        padding: 5px;
        margin: 6px 4px 6px 4px;
        box-shadow: 1px 1px 3px #888;
    }

        .notify-info:before, .notify-success:before, .notify-warning:before, .notify-error:before {
            font-family: FontAwesome;
            font-style: normal;
            font-weight: 400;
            speak: none;
            display: inline-block;
            text-decoration: inherit;
            width: 1em;
            margin-right: .2em;
            text-align: center;
            font-variant: normal;
            text-transform: none;
            line-height: 1em;
            margin-left: .2em;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale
        }

        .notify-info:before {
            content: "\f05a";
        }

        .notify-success:before {
            content: '\f00c';
        }

        .notify-warning:before {
            content: '\f071';
        }

        .notify-error:before {
            content: '\f057';
        }

    .notify-info {
        color: #00529B;
        background-color: #BDE5F8;
    }

    .notify-success {
        color: #4F8A10;
        background-color: #DFF2BF;
    }

    .notify-warning {
        color: #9F6000;
        background-color: #FEEFB3;
    }

    .notify-error {
        color: #D8000C;
        background-color: #FFD2D2;
    }

    /*Syncfusion*/
    .e-btn.e-flat.e-primary, .e-btn.e-flat.e-primary:focus {
        background-color: #317ab9;
        border-color: #265f91;
        color: #fff;
    }

        .e-btn.e-flat.e-primary:hover, .e-btn.e-flat.e-primary:active {
            background-color: #21527d;
            border-color: #163854;
            color: #fff;
        }

    .close-icon {
        width: 24px;
        height: 24px;
        position: relative;
        display: inline-block;
    }

    .error-msg {
        color: #66afe9;
        display: inline-block;
        position: relative;
        top: -20px;
        left: 10px;
    }

    .error-detail {
        position: relative;
        left: 56px;
        margin: 0 0 21px;
    }

    .e-icons.close-icon.col-lg-2:before {
        content: '\e761';
        font-size: 32px;
        color: #d9534f;
        position: relative;
        left: 1px;
        bottom: 10px;
    }

    .e-dialog .e-footer-content {
        background-color: #f8f8f8;
    }

    .e-dialog.e-control.e-popup, .e-dialog.e-control.e-popup .e-dlg-header-content {
        background-color: #d9edf7;
    }

    .e-dialog.e-control.e-popup {
        padding: 3px;
    }

    .e-dialog.e-control .e-dlg-header-content {
        padding: 10px;
    }

    .e-dialog.e-control .e-footer-content {
        padding: 8px 12px;
    }

    .e-dialog.e-control .e-dlg-content {
        padding: 15px 0 0;
    }

    .msg-wrapper.col-lg-12 {
        margin-top: 20px;
    }
</style>
