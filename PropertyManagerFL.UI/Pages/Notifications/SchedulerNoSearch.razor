@page "/schedulernosearch"

@using PropertyManagerFL.Application.Interfaces.Services.AppManager
@using PropertyManagerFL.Application.ViewModels.Appointments
@using PropertyManagerFL.UI.Data.Scheduler;
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Schedule


<PageTitle>Agenda</PageTitle>
<PageTitleComponent PageTitle="Agenda" />

@if (dataSource is null)
{
    <LoadingData />
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-9 control-section">
                <SfSchedule TValue="AppointmentVM" @ref="ScheduleRef"
                            Width="100%" CssClass="@(ShowSchedule ? string.Empty : "schedule-hide")"
                            Height="650px" @bind-SelectedDate="@CurrentDate">
                    <ScheduleResources>
                        <ScheduleResource TItem="ResourceData" TValue="int" DataSource="@ApptResources"
                                          Field="ApptType" Title="Tipo" Name="ApptTypes" TextField="Text" IdField="Id"
                                          ColorField="Color"></ScheduleResource>
                    </ScheduleResources>
                    <ScheduleEvents TValue="AppointmentVM"
                                    OnActionFailure="OnActionFailure"
                                    OnActionBegin="OnActionBegin" ActionCompleted="OnActionCompleted" />
                    <ScheduleEventSettings DataSource="@dataSource" />
                    @*                     <ScheduleField>
                <FieldSubject Title="Assunto"></FieldSubject>
                <FieldDescription Title="Notas"></FieldDescription>
                </ScheduleField>
                *@
                    <ScheduleTemplates>
                        <ScheduleViews>
                            <ScheduleView Option="View.Day"></ScheduleView>
                            <ScheduleView Option="View.Week"></ScheduleView>
                            <ScheduleView Option="View.WorkWeek"></ScheduleView>
                            <ScheduleView Option="View.Month"></ScheduleView>
                            <ScheduleView Option="View.Agenda"></ScheduleView>
                        </ScheduleViews>
                    </ScheduleTemplates>
                </SfSchedule>
            </div>
        </div>
    </div>

    <SfToast ID="toast_custom" @ref="ToastObj" ShowProgressBar=true
             Title="@ToastTitle" Icon="@ToastIcon"
             Content="@ToastMessage"
             CssClass="@ToastCss" Timeout="3000"
             ShowCloseButton="true">
        <ToastAnimationSettings>
            <ToastShowAnimationSettings Effect="ToastEffect.FadeIn" Duration="600"></ToastShowAnimationSettings>
            <ToastHideAnimationSettings Effect="ToastEffect.FadeOut" Duration="600"></ToastHideAnimationSettings>
        </ToastAnimationSettings>
        <ToastButtons>
            <ToastButton Content="@L["btnFechar"]" OnClick="@HideToast"></ToastButton>
        </ToastButtons>
        <ToastPosition X="Right" Y="Bottom"></ToastPosition>
    </SfToast>

}

@code {

    [Inject] public IAppointmentsService? ApptsService { get; set; }
    [Inject] protected IStringLocalizer<App>? L { get; set; }
    [Inject] protected ILogger<App>? logger { get; set; }

    protected SfSchedule<AppointmentVM>? ScheduleRef;
    protected AppointmentVM SelectedAppointment { get; set; } = new();
    protected List<AppointmentVM> dataSource = new();
    protected List<AppointmentVM>? gridDataSource = new List<AppointmentVM>();

    protected DateTime CurrentDate = DateTime.Now;
    protected bool ShowSchedule { get; set; } = true;
    protected string SearchValue { get; set; } = string.Empty;
    protected string SubjectValue { get; set; } = string.Empty;
    protected string LocationValue { get; set; } = string.Empty;
    protected DateTime? DateStart { get; set; }
    protected DateTime? DateEnd { get; set; }

    protected DateTime ApptStartAppt { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 09, 00, 00);

    protected List<ResourceData>? ApptResources { get; set; }

    protected SfToast? ToastObj { get; set; }
    protected string ToastTitle = "";
    protected string ToastContent = "";
    protected string ToastCssClass = "";

    protected string? ToastMessage;
    protected string? ToastCss;
    protected string? ToastIcon;

    protected string? NewCaption { get; set; }
    protected string? EditCaption { get; set; }
    protected string? DeleteCaption;

    protected int AppointmentId;

    protected class ResourceData
    {
        public int Id { get; set; }
        public string Text { get; set; } = string.Empty;
        public string Color { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        dataSource = await GetAppointments();

        ApptResources = new List<ResourceData>
        {
            new ResourceData{ Text = "IRS", Id= 1, Color = "#df5286" },
            new ResourceData{ Text = L["TituloIMI"], Id= 2, Color = "#7fa900" }, // events related to council tax
            new ResourceData{ Text = L["TituloRecibos"], Id= 3, Color = "#ea7a57" }, // events related to rental receipts
            new ResourceData{ Text = L["TituloFinancas"], Id= 4, Color = "#4682B4" }, // events related to the tax office
            new ResourceData{ Text = L["TituloCartas"], Id= 5, Color = "#a1d179" }, // Letters that should be sent to tenants
            new ResourceData{ Text = L["TituloContratos"], Id= 6, Color = "#455275" }, // events relating to lease contracts
            new ResourceData{ Text = L["TituloCondominios"], Id= 7, Color = "#96ADD5" },// events related to condominium
            new ResourceData{ Text = L["TituloPessoais"], Id= 8, Color = "#7f89a3" } // Other events (personal)
        };

    }


    protected async Task HideToast()
    {
        await ToastObj!.HideAsync();
    }

    protected async Task OnDataBound(Syncfusion.Blazor.Schedule.DataBoundEventArgs<AppointmentVM> args)
    {
        // You can get the entire appointment collections in the EventCollection variable
        // List<Appointment> eventCollection = await ScheduleObj.GetEvents();

        string startWkgHour = ApptStartAppt.ToShortTimeString();
        await ScheduleRef!.ScrollToAsync(startWkgHour, DateTime.Now);
    }

    protected async void OnActionBegin(Syncfusion.Blazor.Schedule.ActionEventArgs<AppointmentVM> args)
    {
        if (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange)
        {
            if (args.ActionType == ActionType.EventCreate)
            {
                SelectedAppointment = args.AddedRecords[0];
                SelectedAppointment.CategoryColor = ApptResources[SelectedAppointment.ApptType - 1].Color;

                var result = await ApptsService!.InsertAsync(SelectedAppointment);

                ToastTitle = $"{L["NewMsg"]} {L["TituloTarefa"]}";
                ToastCss = "e-toast-success";
                ToastMessage = L["SuccessInsert"];
                ToastIcon = "fas fa-check";
            }
            if (args.ActionType == ActionType.EventChange)
            {
                ToastTitle = $"{L["EditMsg"]} {L["TituloTarefa"]}";
                ToastCss = "e-toast-success";
                ToastMessage = L["RegistoGravadoSucesso"];
                ToastIcon = "fas fa-check";

                SelectedAppointment = args.ChangedRecords[0];
                SelectedAppointment.CategoryColor = ApptResources[SelectedAppointment.ApptType - 1].Color;
                var result = await ApptsService!.UpdateAsync(SelectedAppointment.Id, SelectedAppointment);
            }

            StateHasChanged();
            await Task.Delay(200);
            await ToastObj!.ShowAsync();
            try
            {
                dataSource = await GetAppointments();
            }
            catch (Exception ex)
            {
                logger?.LogError(ex.Message);
            }
        }
        else if (args.ActionType == ActionType.EventRemove)
        {
            ToastTitle = $"{L["DeleteMsg"]} {L["TituloTarefa"]}";
            ToastCssClass = "e-toast-success";
            ToastContent = L["RegistoAnuladoSucesso"];
            ToastIcon = "fas fa-check";
            await ApptsService!.DeleteAsync(args.DeletedRecords[0].Id);

            SelectedAppointment = args.DeletedRecords[0];

            StateHasChanged();
            if (ToastObj is not null)
            {
                await Task.Delay(200);
                await ToastObj!.ShowAsync();
            }
            try
            {
                dataSource = await GetAppointments();
            }
            catch (Exception ex)
            {
                logger?.LogError(ex.Message);
            }
        }

    }
    protected async void OnActionCompleted(Syncfusion.Blazor.Schedule.ActionEventArgs<AppointmentVM> args)
    {

        if (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange)
        {
            if (args.ActionType == ActionType.EventCreate)
            {
                ToastTitle = $"{L["NewMsg"]} {L["TituloTarefa"]}";
                ToastCss = "e-toast-success";
                ToastMessage = L["SuccessInsert"];
                ToastIcon = "fas fa-check";
            }
            if (args.ActionType == ActionType.EventChange)
            {
                ToastTitle = $"{L["EditMsg"]} {L["TituloTarefa"]}";
                ToastCss = "e-toast-success";
                ToastMessage = L["RegistoGravadoSucesso"];
                ToastIcon = "fas fa-check";
            }

            StateHasChanged();
            if (ToastObj is not null)
            {
                await Task.Delay(200);
                await ToastObj.ShowAsync();
            }
        }
        else if (args.ActionType == ActionType.EventRemove)
        {
            ToastTitle = $"{L["DeleteMsg"]} {L["TituloTarefa"]}";
            ToastCssClass = "e-toast-success";
            ToastContent = L["RegistoAnuladoSucesso"];
            ToastIcon = "fas fa-check";
            StateHasChanged();

            if (ToastObj is not null)
            {
                await Task.Delay(200);
                await ToastObj.ShowAsync();
            }
        }

    }

    public void OnActionFailure(Syncfusion.Blazor.Schedule.ActionEventArgs<AppointmentVM> args)
    {
        var actionType = args.ActionType; // for debugging
        var errorMsg = args.Error;
        logger?.LogError(errorMsg.Message);
    }

    private async Task<List<AppointmentVM>> GetAppointments()
    {
        try
        {
            var result = (await ApptsService!.GetAllAsync()).ToList();
            return result;
        }
        catch (Exception ex)
        {
            logger?.LogError(ex.Message);
            return new();
        }
    }

}
<style>
    .header-customization {
        padding-bottom: 10px;
    }

    .property-customization {
        padding-right: 5px;
    }

    .button-customization {
        padding: 15px 3px;
    }

    .schedule-hide {
        display: none;
    }

    @@media (max-width: 441px) {
        .button-customization {
            padding: 30px !important;
        }
    }
</style>