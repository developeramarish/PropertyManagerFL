@page "/expenses/dashboard"
@using PropertyManagerFL.Application.Interfaces.Services.AppManager
@using PropertyManagerFL.Application.Interfaces.Services.Stats
@using PropertyManagerFL.Application.Shared.Enums
@using PropertyManagerFL.Application.ViewModels.Despesas
@using PropertyManagerFL.Application.ViewModels.Fracoes
@using PropertyManagerFL.Core.Entities
@using PropertyManagerFL.UI.Components.Cards


<header>
    <div class="module-title">
        <div class="title">@L["TituloPainelDespesas"]</div>
        <div class="underline"></div>
    </div>
</header>
@if (expensesList is null || last5Transactions is null ||
CategoriesWithMoreSpending is null || CategoriesWithMoreSpendings_ByYear_Current is null ||
CategoriesWithMoreSpendings_ByYear_Prior is null)
{
    <LoadingData />
}
else
{
    <div id="dashboard" class="planner-dashboard">
        <div class="content view-detail-display" style="margin: 0px;">
            <div class="col-12 mb-3">
                <div class="container col-lg-12 col-md-12 col-sm-12">
                    <div class="row card-box">
                        <DashboardStatCard ResultadoAnual="@ExpensesThisYear.ToString("C2")"
                                           TituloAnual="@L["TituloDespesasEsteAno"]"
                                           ResultadoMensal="@ExpensesThisMonth.ToString("C2")"
                                           TituloMensal="@L["TituloDespesasEsteMes"]"
                                           ResultadoSemanal="@ExpensesThisWeek.ToString("C2")"
                                           TituloSemanal="@L["TituloDespesasEstaSemana"]"
                                           ResultadoDiario="@ExpensesToday.ToString("C2")"
                                           TituloDiario="@L["TituloDespesasHoje"]">
                        </DashboardStatCard>
                    </div>
                </div>
            </div>
            @if (expensesList.Any())
            {
                <div class="row">
                    <div class="col-lg-6 control-section sb-property-border">
                        <div class="control-section">
                            <SfMessage ContentAlignment="HorizontalAlign.Center" Severity="MessageSeverity.Info">@DateTime.Now.Year.ToString()</SfMessage>
                            <ExpPieChart @ref="PieChartRef"
                                         FilterType="C"
                                         Title="@L["TituloDespesasPorCategoria"]"
                                         Year="@(DateTime.Today.Year)" />
                        </div>
                    </div>
                    <div class="col-lg-6 control-section sb-property-border">
                        <div class="control-section">
                            <SfMessage ContentAlignment="HorizontalAlign.Center" Severity="MessageSeverity.Success">@DateTime.Now.AddYears(-1).Year.ToString()</SfMessage>
                            <ExpPieChart @ref="PieChartRef"
                                         FilterType="C"
                                         Title="@L["TituloDespesasPorCategoria"]"
                                         Year="@(DateTime.Today.Year - 1)" />
                        </div>
                    </div>
                </div>
            }
            else
            {
                <SfMessage Severity="MessageSeverity.Warning">@L["TituloSemDadosParaMostrar"]</SfMessage>
            }

        </div>
        @if (Expenses_ByType?.Count() > 0)
        {
            <div class="card-box">
                <div class="row">
                    <div class="col-lg-6 control-section sb-property-border">
                        <div class="control-section">
                            <ExpLineChart Year="@DateTime.Now.Year.ToString()" Expenses="@CategoriesSummaryCurrentYear" />
                        </div>
                    </div>
                    <div class="col-lg-6 control-section sb-property-border">
                        <div class="control-section">
                            <ExpLineChart Year="@DateTime.Now.AddYears(-1).Year.ToString()"  Expenses="@CategoriesSummaryPreviousYear" />
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="row card-box">
            <div class="col-md-6">
                <div class="table table-striped">
                    <AlertMessage Message="@L["TituloCincoUltimosMovimentos"]" MessageType="AppDefinitions.AlertMessageType.Info"></AlertMessage>
                    <SfGrid DataSource="@last5Transactions"
                            RowHeight="28"
                            GridLines="GridLine.Horizontal">
                        <GridColumns>
                            <GridColumn Field=@nameof(DespesaVM.DataMovimento) HeaderText="@L["TituloData"]"
                                        TextAlign="TextAlign.Center" Format="d" Width="100"></GridColumn>
                            <GridColumn Field=@nameof(DespesaVM.TipoDespesa) HeaderText="@L["TituloCategoria"]"
                                        Width="200"></GridColumn>
                            <GridColumn Field=@nameof(DespesaVM.Valor_Pago) HeaderText="@L["TituloValor"]" Format="C2"
                                        TextAlign="TextAlign.Right" Width="100"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
            <div class="col-md-6">
                <div class="table table-striped">
                    <AlertMessage Message="IMI Previsto" MessageType="AppDefinitions.AlertMessageType.Warning"></AlertMessage>
                    <SfGrid DataSource="@IMIValues" TValue="IMIResults"
                            RowHeight="28"
                            GridLines="GridLine.Horizontal">
                        <GridColumns>
                            <GridColumn Field=@nameof(IMIResults.Descricao) HeaderText="@L["lblDescricaoCategoria"]"
                                        Width="250"></GridColumn>
                            <GridColumn Field=@nameof(IMIResults.ValPatrimonio) HeaderText="@L["TituloValorPatrimonial"]"
                                        Format="C2"
                                        TextAlign="TextAlign.Right" Width="150"></GridColumn>
                            <GridColumn Field=@nameof(IMIResults.ValorPagar) HeaderText="@L["TituloValorPagar"]"
                                        Format="C2"
                                        TextAlign="TextAlign.Right" Width="150"></GridColumn>
                        </GridColumns>
                        <GridAggregates>
                            <GridAggregate>
                                <GridAggregateColumns>
                                    <GridAggregateColumn Field=@nameof(IMIResults.ValPatrimonio) Type="AggregateType.Sum" Format="C2">
                                        <FooterTemplate>
                                            @{
                                                var aggregate = (context as AggregateTemplateContext);
                                                <p class="my-1">@aggregate?.Sum</p>
                                            }
                                        </FooterTemplate>
                                    </GridAggregateColumn>
                                    <GridAggregateColumn Field=@nameof(IMIResults.ValorPagar) Type="AggregateType.Sum" Format="C2">
                                        <FooterTemplate>
                                            @{
                                                var aggregate = (context as AggregateTemplateContext);
                                                <p class="my-1">@aggregate?.Sum</p>
                                            }
                                        </FooterTemplate>
                                    </GridAggregateColumn>
                                </GridAggregateColumns>
                            </GridAggregate>
                        </GridAggregates>

                    </SfGrid>
                </div>
            </div>

        </div>
        <div class="row card-box">
            <div class="col-md-6">
                <div class="table table-striped">
                    <SfMessage Variant="MessageVariant.Text" Severity="MessageSeverity.Success">@TituloCategoriaEsteAno</SfMessage>
                    <SfGrid DataSource="@CategoriesWithMoreSpendings_ByYear_Current"
                            RowHeight="28"
                            GridLines="GridLine.Horizontal">
                        <GridColumns>
                            <GridColumn Field=@nameof(ExpensesSummaryData.Descricao) HeaderText="@L["TituloCategoria"]" Width="170" />
                            <GridColumn Field=@nameof(ExpensesSummaryData.NumeroMovimentos) HeaderText="@L["TituloContagem"]" TextAlign="TextAlign.Right" Width="60" />
                            <GridColumn Field=@nameof(ExpensesSummaryData.TotalDespesas) HeaderText="@L["TituloValor"]" TextAlign="TextAlign.Right" Format="C2" Width="80" />
                        </GridColumns>
                        <GridAggregates>
                            <GridAggregate>
                                <GridAggregateColumns>
                                    <GridAggregateColumn Field=@nameof(ExpensesSummaryData.TotalDespesas) Type="AggregateType.Sum" Format="C2">
                                        <FooterTemplate>
                                            @{
                                                var aggregate = (context as AggregateTemplateContext);
                                                <p class="my-1">@aggregate.Sum</p>
                                            }
                                        </FooterTemplate>
                                    </GridAggregateColumn>
                                </GridAggregateColumns>
                            </GridAggregate>
                        </GridAggregates>
                    </SfGrid>
                </div>
            </div>
            <div class="col-md-6">
                <div class="table table-striped">
                    <SfMessage Variant="MessageVariant.Text" Severity="MessageSeverity.Success">@TituloCategoriaAnoAnterior</SfMessage>
                    <SfGrid DataSource="@CategoriesWithMoreSpendings_ByYear_Prior"
                            RowHeight="28"
                            GridLines="GridLine.Horizontal">
                        <GridColumns>
                            <GridColumn Field=@nameof(ExpensesSummaryData.Descricao) HeaderText="@L["TituloCategoria"]" Width="170" />
                            <GridColumn Field=@nameof(ExpensesSummaryData.NumeroMovimentos) HeaderText="@L["TituloContagem"]" TextAlign="TextAlign.Right" Width="60" />
                            <GridColumn Field=@nameof(ExpensesSummaryData.TotalDespesas) HeaderText="@L["TituloValor"]" TextAlign="TextAlign.Right" Format="C2" Width="80" />
                        </GridColumns>
                        <GridAggregates>
                            <GridAggregate>
                                <GridAggregateColumns>
                                    <GridAggregateColumn Field=@nameof(ExpensesSummaryData.TotalDespesas) Type="AggregateType.Sum" Format="C2">
                                        <FooterTemplate>
                                            @{
                                                var aggregate = (context as AggregateTemplateContext);
                                                <p class="my-1">@aggregate.Sum</p>
                                            }
                                        </FooterTemplate>
                                    </GridAggregateColumn>
                                </GridAggregateColumns>
                            </GridAggregate>
                        </GridAggregates>
                    </SfGrid>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] public IFracaoService? fracoesService { get; set; }
    [Inject] public IDespesaService? expensesService { get; set; }
    [Inject] public IStatsService? statsService { get; set; }
    [Inject] public IStringLocalizer<App> L { get; set; }
    protected ExpPieChart? PieChartRef { get; set; } = null;

    protected IEnumerable<DespesaVM>? expensesList { get; set; }
    protected IEnumerable<DespesaVM>? last5Transactions { get; set; }
    protected IEnumerable<ExpensesSummaryData>? CategoriesWithMoreSpending { get; set; }
    protected IEnumerable<ExpensesSummaryData>? CategoriesWithMoreSpendings_ByYear_Current { get; set; }
    protected IEnumerable<ExpensesSummaryData>? CategoriesWithMoreSpendings_ByYear_Prior { get; set; }

    protected IEnumerable<ExpensesSummaryDataByType>? Expenses_ByType { get; set; } = default;

    protected IEnumerable<ExpensesSummaryDataByType>? CategoriesSummaryCurrentYear { get; set; } = default;
    protected IEnumerable<ExpensesSummaryDataByType>? CategoriesSummaryPreviousYear { get; set; } = default;

    protected List<FracaoVM>? AllUnits { get; set; } = new();
    protected List<IMIResults>? IMIValues { get; set; } = new();

    protected decimal ExpensesTotal;
    protected decimal ExpensesThisYear;
    protected decimal ExpensesThisMonth;
    protected decimal ExpensesThisWeek;
    protected decimal ExpensesToday;
    protected string CategoryWithMoreSpendings = "";
    protected string SecondCategoryWithMoreSpendings = "";
    protected string TituloCategoriaComMaisGastos = "";
    protected string TituloSegundaCategoriaComMaisGastos = "";
    protected string? TituloCategoriaEsteAno;
    protected string? TituloCategoriaAnoAnterior;

    protected class IMIResults
    {
        public decimal ValPatrimonio { get; set; }
        public string? Descricao { get; set; }
        public double Coeficiente { get; set; }
        public decimal ValorPagar { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        TituloCategoriaComMaisGastos = $"{L["TituloDespesasCategoriaComMaisGastos"]} {DateTime.Today.Year}";
        TituloSegundaCategoriaComMaisGastos = $"{L["TituloDespesasSegundaCategoriaComMaisGastos"]} {DateTime.Today.Year}";

        TituloCategoriaEsteAno = $"{L["TituloDespesasPorCategoria_Ano"]} {DateTime.Now.Year}";
        TituloCategoriaAnoAnterior = $"{L["TituloDespesasPorCategoria_Ano"]} {DateTime.Now.AddYears(-1).Year}";
        DateTime startOfWeek = DateTime.Today;
        int delta = DayOfWeek.Monday - startOfWeek.DayOfWeek;
        startOfWeek = startOfWeek.AddDays(delta);

        DateTime endOfWeek = startOfWeek.AddDays(7);

        try
        {
            AllUnits = (await fracoesService!.GetAll()).ToList();
            foreach (var unit in AllUnits)
            {
                IMIValues?.Add(
                new IMIResults
                    {
                        Descricao = unit.Descricao,
                        ValPatrimonio = unit.ValorUltAvaliacao,
                        ValorPagar = Math.Round(unit.ValorUltAvaliacao * (decimal)0.0033, 2)
                    });
            }

            expensesList = await expensesService!.GetAll();
            last5Transactions = expensesList.OrderByDescending(l => l.DataMovimento).ToList().Take(5);
            ExpensesTotal = expensesList.Sum(e => e.Valor_Pago);
            ExpensesThisYear = expensesList.Where(e => e.DataMovimento.Year == DateTime.Today.Year).Sum(f => f.Valor_Pago);
            ExpensesThisMonth = expensesList.Where(e => e.DataMovimento.Year == DateTime.Today.Year && e.DataMovimento.Month == DateTime.Today.Month).Sum(f => f.Valor_Pago);
            ExpensesToday = expensesList.Where(e => e.DataMovimento.Date == DateTime.Today.Date).Sum(f => f.Valor_Pago);

            ExpensesThisWeek = expensesList.Where(x => (
            (x.DataMovimento >= startOfWeek && x.DataMovimento < endOfWeek) ||
            (x.DataMovimento >= startOfWeek && x.DataMovimento < endOfWeek) ||
            (x.DataMovimento >= startOfWeek && x.DataMovimento < endOfWeek)
            )).Sum(t => t.Valor_Pago);

            CategoriesWithMoreSpending = await statsService.GetExpensesCategoriesWithMoreSpending();
            // Current year's expenses (result may be 0)
            if (CategoriesWithMoreSpending.Any())
            {
                CategoryWithMoreSpendings = $"{CategoriesWithMoreSpending.ElementAt(0).Descricao} - ({CategoriesWithMoreSpending.ElementAt(0).TotalDespesas.ToString("#,###.00")})";
                if (CategoriesWithMoreSpending.Count() > 1)
                    SecondCategoryWithMoreSpendings = $"{CategoriesWithMoreSpending.ElementAt(1).Descricao} - ({CategoriesWithMoreSpending.ElementAt(1).TotalDespesas.ToString("#,###.00")})";
            }

            CategoriesWithMoreSpendings_ByYear_Current = await statsService.GetExpensesCategoriesWithMoreSpendings_ByYear(DateTime.Today.Year);
            CategoriesWithMoreSpendings_ByYear_Prior = await statsService.GetExpensesCategoriesWithMoreSpendings_ByYear(DateTime.Today.Year - 1);

            Expenses_ByType = (await statsService.GetTotalExpenses_ByType()).ToList();
            CategoriesSummaryCurrentYear = Expenses_ByType
                .Where(p => p.YearOfExpenses == DateTime.Now.Year);
            CategoriesSummaryPreviousYear = Expenses_ByType
                .Where(p => p.YearOfExpenses == DateTime.Now.Year - 1);

        }
        catch (Exception)
        {
            throw;
        }
    }
    }


<style>
    #main-page {
        overflow-x: hidden;
        background: linear-gradient(-141deg, #EEF5F7 14%, #EEF2FB 100%);
    }

    .sidebar-Rightpane {
        padding-bottom: 18px;
        margin-right: -2px;
    }
</style>
