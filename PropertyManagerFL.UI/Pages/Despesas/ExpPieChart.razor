@using PropertyManagerFL.Application.Interfaces.Services.Stats
@using PropertyManagerFL.Core.Entities;
@using Syncfusion.Blazor.Charts

@inject IStringLocalizer<App> localizerApp
@inject IStatsService statsService

<SfAccumulationChart Title="@Title" EnableAnimation="true">
    <AccumulationChartTooltipSettings Enable="true" />
    <AccumulationChartLegendSettings Position="Syncfusion.Blazor.Charts.LegendPosition.Bottom" Visible="true" />
    <AccumulationChartTitleStyle FontFamily="Arial" FontStyle="Normal" FontWeight="bold" Color="#99ccff" Size="20px" />
    <AccumulationChartSubTitleStyle FontFamily="Arial" FontWeight="regular" Color="#E27F2D" Size="16px" />
    <AccumulationChartSeriesCollection>
        <AccumulationChartSeries DataSource="@PieData" XName="Descricao" YName="TotalDespesas" Name="Descricao"
                                 Radius="@OuterRadius" StartAngle="@StartAngle" EndAngle="@EndAngle" 
                                 InnerRadius="0%" ExplodeIndex="@ExplodeIndex" Explode="true" ExplodeOffset="@ExplodeRadius">
            <AccumulationDataLabelSettings Visible="true"
                                           Name="TotalDespesas" Position="AccumulationLabelPosition.Inside" />
        </AccumulationChartSeries>
        <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
    </AccumulationChartSeriesCollection>
</SfAccumulationChart>


@code
{
    [Parameter] public int Year { get; set; }
    [Parameter] public string? FilterType { get; set; } = "C";  // 'default 'Category'
    [Parameter] public string? Title { get; set; }

    protected double ExplodeIndex { get; set; } = 0;
    protected string OuterRadius = "70%", ExplodeRadius = "10%";
    protected int StartAngle = 0, EndAngle = 360;
    protected IEnumerable<ExpensesSummaryData>? PieData { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (FilterType == "C") // By category
            {
                PieData = await statsService.GetTotalExpenses(Year);
            }
            else
            {
                PieData = await statsService.GetTotalExpenses_ByYear(Year);
            }
        }
        catch (Exception ex)
        {
            var test = ex.Message;
            throw;
        }
    }
}
