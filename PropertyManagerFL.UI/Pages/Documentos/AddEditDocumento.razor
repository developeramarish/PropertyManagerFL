@using PropertyManagerFL.Application.Interfaces.Services.AppManager;
@using PropertyManagerFL.Application.Interfaces.Services.Common;
@using PropertyManagerFL.Core.Entities;
@using PropertyManagerFL.Application.ViewModels.Documentos;
@using PropertyManagerFL.Application.ViewModels.EstadoCivil;
@using PropertyManagerFL.Application.ViewModels.Inquilinos;
@using PropertyManagerFL.Application.ViewModels.LookupTables;
@using PropertyManagerFL.UI.ApiWrappers;
@using static PropertyManagerFL.Application.Shared.Enums.AppDefinitions;

<div class="group-box-shadow">
    <HeaderDialogComponent HeaderCaption="@HeaderCaption" ImageName="home-owner"></HeaderDialogComponent>
</div>
<div class="container-fluid">
    <EditForm Model="Document">
        <div class="row my-3">
            <div class="form-group">
                <SfTextBox Enabled="true"
                           Placeholder="Título"
                           CssClass="e-field  e-corner"
                           FloatLabelType="@FloatLabelType.Auto"
                           @bind-Value="@Document!.Title">
                </SfTextBox>
            </div>
            <div class="form-group my-2">
                <SfTextBox Multiline="true"
                           Placeholder="Notas"
                           HtmlAttributes="@NotesAttribute"
                           CssClass="e-field  e-corner"
                           FloatLabelType="FloatLabelType.Auto"
                           @bind-Value="@Document!.Description">
                </SfTextBox>
            </div>
            <div class="form-group my-2">
                <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                Value="@idxTipoCategoriaDocumento" ShowClearButton="true" Width="250px"
                                Enabled="@(EditMode == OpcoesRegisto.Inserir)"
                                FilterBarPlaceholder="Selecione" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                Placeholder="Categoria Documento" DataSource="@DocumentTypeCategories" FloatLabelType="FloatLabelType.Always">
                    <DropDownListTemplates TItem="DocumentType">
                    </DropDownListTemplates>
                    <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeTipoDocumento"></DropDownListEvents>
                    <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
            <div class="form-group my-2">
                <SfDropDownList TValue="int" TItem="DocumentType" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                Value="@idxTipoDocumento" ShowClearButton="true" Width="250px"
                                Enabled="@(ShowTipoDocumento && (EditMode == OpcoesRegisto.Inserir))"
                                FilterBarPlaceholder="Selecione" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                Placeholder="Tipo Documento" DataSource="@DocumentTypes" FloatLabelType="FloatLabelType.Always">
                    <DropDownListTemplates TItem="DocumentType">
                    </DropDownListTemplates>
                    <DropDownListEvents TValue="int" TItem="DocumentType" ValueChange="onChangeTipoCategoriaDocumento"></DropDownListEvents>
                    <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
        </div>
        <div hidden="@(HideUploader && (EditMode == OpcoesRegisto.Gravar))" class="form-group my-3">
            <SfUploader ID="UploadFiles" @ref="sfUploader" AutoUpload=false
                        DropArea=".control-fluid"
                        AllowMultiple="false" AllowedExtensions=".pdf"
                        MaxFileSize="@MaxFileSize">
                <UploaderAsyncSettings SaveUrl="@controllerName_Save"
                                       RemoveUrl="@controllerName_Remove" />
                <UploaderEvents OnActionComplete="@OnActionCompleteHandler" />
            </SfUploader>
        </div>
        <div hidden="@HideUploadedFile" class="form-group my-2">
            <SfMessage Severity="MessageSeverity.Success" ShowIcon="false" Variant="MessageVariant.Text">@uploadedFile</SfMessage>
        </div>

    </EditForm>
</div>

@code {

    [Inject] public ILookupTableService? LookupTablesService { get; set; }
    [Inject] public IDocumentosService? documentsService { get; set; }

    [Parameter] public DocumentoVM? Document { get; set; }
    [Parameter] public OpcoesRegisto EditMode { get; set; }
    [Parameter] public string? HeaderCaption { get; set; }

    protected int idxTipoDocumento = 0;
    protected int idxTipoCategoriaDocumento = 0;

    protected bool HideDocumentCategory = true;
    protected bool HideUploader = true;
    protected bool HideUploadedFile = true;

    protected bool ShowTipoDocumento;

    protected string? DocumentCategoryCaption;
    protected string? uploadedFile;

    public IEnumerable<LookupTableVM>? DocumentTypeCategories { get; set; }
    public IEnumerable<DocumentType>? DocumentTypes { get; set; }

    protected SfUploader? sfUploader;
    int MaxFileSize = 10 * 1024 * 1024; // 10 MB

    protected string controllerName_Save = "";
    protected string controllerName_Remove = "";


    protected Dictionary<string, object> NotesAttribute = new Dictionary<string, object>()
{
            {"rows", "4" }
    };

    protected override async Task OnParametersSetAsync()
    {
        DocumentTypeCategories = (await LookupTablesService!.GetLookupTableData("DocumentTypeCategories")).ToList();
        DocumentTypes = (await GetCategoryTypes());

        if (EditMode == OpcoesRegisto.Gravar)
        {
            idxTipoCategoriaDocumento = Document!.DocumentTypeId;
            idxTipoDocumento = DocumentTypes.FirstOrDefault(o => o.Id == idxTipoCategoriaDocumento).TypeCategoryId;
        }
        HideDocumentCategory = true;
        HideUploadedFile = true;
        HideUploader = true;

        ShowTipoDocumento = false;
    }

    protected async Task onChangeTipoDocumento(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupTableVM> args)
    {
        ShowTipoDocumento = true;
        idxTipoCategoriaDocumento = args.Value;
        Document!.DocumentTypeId = idxTipoCategoriaDocumento;

        DocumentTypes = (await GetCategoryTypes()).Where(dt => dt.TypeCategoryId == idxTipoCategoriaDocumento);

        StateHasChanged();
    }

    protected void onChangeTipoCategoriaDocumento(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, DocumentType> args)
    {
        if (args == null || args.Value == 0) return;

        idxTipoDocumento = args.Value;

        HideDocumentCategory = false;
        if (EditMode != OpcoesRegisto.Inserir)
            return;

        HideUploader = false;

        switch (idxTipoCategoriaDocumento)
        {
            case 1:
                controllerName_Save = "api/uploadproperties/save";
                controllerName_Remove = "api/uploadproperties/remove";
                break;
            case 2:
                controllerName_Save = "api/uploadunits/save";
                controllerName_Remove = "api/uploadunits/remove";
                break;
            case 3:
            case 4:
            case 5:
            case 6:
                controllerName_Save = "api/uploadtenantdocuments/save";
                controllerName_Remove = "api/uploadtenantdocuments/remove";
                break;
        }
    }

    private async Task<IEnumerable<DocumentType>> GetCategoryTypes()
    {
        return (await documentsService!.GetAll_DocumentTypes()).ToList();
    }

    private void OnActionCompleteHandler(Syncfusion.Blazor.Inputs.ActionCompleteEventArgs args)
    {
        if (args.FileData.Count() == 0) return;

        uploadedFile = args.FileData.Select(p => p.Name).FirstOrDefault();
        HideUploadedFile = false;

        Document!.URL = uploadedFile;

        StateHasChanged();
    }

}

<style>
    .custom-class.e-control-wrapper .e-textbox {
        text-align: center;
    }
</style>
