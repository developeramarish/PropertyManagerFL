@page "/CalculadoraIMI"
@using PropertyManagerFL.Application.Interfaces.Services.AppManager
@using PropertyManagerFL.Application.ViewModels.Fracoes
@using PropertyManagerFL.Application.ViewModels.LookupTables
@using PropertyManagerFL.Core.Entities
<h3>CalculadoraIMI</h3>
<div class="container-fluid w-50 ">
    <div class="card card-block w-75 h-100 my-3 mx-2 shadow">
        <div class="card-header h4 text-center  mt-1">Preencha os campos abaixo para calcular o IMI</div>
        <div class="card-content">
            <div class="row mx-1">
                <div class="col-md-6 mt-2">
                    <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                    Value="@idxProperty" ShowClearButton="true" Enabled="true"
                                    FilterBarPlaceholder="@L["msgSelect"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    Placeholder="@L["TituloImovel"]" DataSource="@PropertiesLookup" FloatLabelType="FloatLabelType.Always">
                        <DropDownListTemplates TItem="LookupTableVM">
                        </DropDownListTemplates>
                        <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeProperty"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="col-md-6 mt-2">
                    <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                    ShowClearButton="true" Enabled="@ShowUnitsCombo"
                                    FilterBarPlaceholder="@L["msgSelect"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    Placeholder="@L["TituloFracao"]" DataSource="@UnitsLookup" FloatLabelType="FloatLabelType.Always">
                        <DropDownListTemplates TItem="LookupTableVM">
                        </DropDownListTemplates>
                        <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeUnit"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row mx-1">
                <div class="col-md-12 mx-1 w-50">
                    @if (generalUse)
                    {
                        <SfTextBox CssClass="e-field text-align-right"
                                   Width="200px" Enabled="false"
                                   Value="@valorPatrimonio.ToString("C")"
                                   FloatLabelType="FloatLabelType.Auto"
                                   Placeholder="Valor patrimonial tributável" />
                    }
                    else
                    {
                        <SfNumericTextBox CssClass="e-field"
                                          ShowSpinButton="true" class="text-align-right"
                                          Decimals="0"
                                          Width="200px" @bind-Value="@valorPatrimonio"
                                          FloatLabelType="FloatLabelType.Auto"
                                          Placeholder="Valor patrimonial tributável" />

                    }
                </div>
                <div class="col-md-6">
                    <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                    ShowClearButton="true" Width="250px"
                                    FilterBarPlaceholder="@L["TituloSelecao"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    Placeholder="Distrito" DataSource="@Distritos" FloatLabelType="FloatLabelType.Always">
                        <DropDownListTemplates TItem="LookupTableVM">
                        </DropDownListTemplates>
                        <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeDistrito"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div hidden="@(idxDistrito == 0)" class="col-md-6">
                    <SfDropDownList TValue="int" TItem="Concelho" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                    ShowClearButton="true" Width="250px"
                                    Value="@idxDistrito"
                                    FilterBarPlaceholder="@L["TituloSelecao"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    Placeholder="Concelho" DataSource="@Concelhos" FloatLabelType="FloatLabelType.Always">
                        <DropDownListTemplates TItem="Concelho">
                        </DropDownListTemplates>
                        <DropDownListEvents TValue="int" TItem="Concelho" ValueChange="onChangeConcelho"></DropDownListEvents>
                        <DropDownListFieldSettings Value="IdDistrito" Text="Descricao"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
            </div>
            <div class="row mx-1 mb-2">
                <div class="col-md-6">
                    <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true" CssClass="e-dropdown-popup ml-5"
                                    ShowClearButton="true" Width="250px"
                                    Value="@idxTipoImovel"
                                    FilterBarPlaceholder="@L["TituloSelecao"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                    Placeholder="Tipo de Imóvel" DataSource="@TiposImovel" FloatLabelType="FloatLabelType.Always">
                        <DropDownListTemplates TItem="LookupTableVM">
                        </DropDownListTemplates>
                        <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeTipoImovel"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                    </SfDropDownList>
                </div>
                <div class="col-md-6">
                    <SfTextBox CssClass="e-field"
                               Width="200px"
                               FloatLabelType="FloatLabelType.Auto" Value="0" Placeholder="Nº filhos" />
                </div>
            </div>
            <hr />
            <div class="d-flex justify-content-around align-items-end gap-2 my-2">
                <SfButton CssClass="e-btn e-success e-round-corner p-2" IconCss="fa fa-calculator" OnClick="Calculate" Content="Calcular" />
                <SfButton CssClass="e-btn e-outline e-round-corner p-2" IconCss="fa fa-remove" OnClick="Clear" Content="Limpar" />
            </div>
            <hr />
        </div>
    </div>
    <div hidden="@HideResults" class="card card-block w-75 h-100 my-3 mx-2">
        <div class="card-header h4 text-center  mt-1">Resultado da simulação</div>
        <div class="card-body">
            <div class="row mx-1">
                <div class="col-md-6">
                    <SfMessage>Montante de IMI a pagar</SfMessage>
                </div>
                <div class="col-md-6">
                    <SfMessage Variant="MessageVariant.Outlined" Severity="MessageSeverity.Info" ShowCloseIcon=false ShowIcon=false>@(valorIMI)€</SfMessage>
                </div>
            </div>
            <div class="row mx-1 my-1">
                <div class="col-md-6">
                    <SfMessage>Coeficiente</SfMessage>
                </div>
                <div class="col-md-6">
                    <SfMessage Variant="MessageVariant.Outlined" Severity="MessageSeverity.Info" ShowCloseIcon=false ShowIcon=false>@coeficiente</SfMessage>
                    </div>
                </div>
                <div class="m-2">
                    <SfMessage Variant="MessageVariant.Filled" Severity="MessageSeverity.Info">Plano de Pagamentos</SfMessage>
                </div>
                <div class="row mx-1">
                    <div class="col-md-6">
                        <SfMessage>Maio</SfMessage>
                    </div>
                    <div class="col-md-6">
                        <SfMessage Variant="MessageVariant.Outlined" Severity="MessageSeverity.Info" ShowCloseIcon=false ShowIcon=false>@(valorIMI / 2)€</SfMessage>
                    </div>
                </div>
                <div class="row mx-1 my-1">
                    <div class="col-md-6">
                        <SfMessage>Novembro</SfMessage>
                    </div>
                    <div class="col-md-6">
                        <SfMessage Variant="MessageVariant.Outlined" Severity="MessageSeverity.Info" ShowCloseIcon=false ShowIcon=false>@(valorIMI / 2)€</SfMessage>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @code {

    /*
    * Se o valor do IMI for igual ou inferior a 100 euros, tem de ser pago na totalidade, em maio.
    * Caso o valor do imposto seja superior a 100 euros e inferior a 500 euros, o pagamento é efetuado em duas prestações, em maio e novembro.
    * A partir de 500 euros, o valor de IMI é pago em três prestações, em maio, agosto e novembro.
    */

    [Inject] public IImovelService? imoveisService { get; set; }
    [Inject] public IFracaoService? fracoesService { get; set; }
    [Inject] public IDistritosConcelhosService? service { get; set; }
    [Inject] public IStringLocalizer<App> L { get; set; }

    protected IEnumerable<LookupTableVM>? PropertiesLookup { get; set; }
    protected List<LookupTableVM>? UnitsLookup { get; set; } = new();
    protected List<FracaoVM>? Units { get; set; } = new();

    protected IEnumerable<LookupTableVM>? Distritos { get; set; }
    protected IEnumerable<Concelho>? Concelhos { get; set; }
    protected bool distritoSelected;
    protected int idxDistrito;
    protected int idxConcelho;
    protected int idxTipoImovel;
    protected float coeficiente;
    protected decimal valorPatrimonio;
    protected decimal valorIMI;

    protected bool generalUse = false;
    protected int idxProperty;
    protected int idxUnit;
    protected bool ShowUnitsCombo;
    protected bool HideResults = true;
    protected string? coefCaption;

    protected List<LookupTableVM> TiposImovel { get; set; } = new List<LookupTableVM>()
    {
        new LookupTableVM{Id = 1, Descricao = "Urbano"},
        new LookupTableVM{Id = 2, Descricao = "Rústico"}
    };
    protected override async Task OnInitializedAsync()
    {

        idxTipoImovel = 1;
        coeficiente = 0;
        valorIMI = 0;
        distritoSelected = false;
        Distritos = (await service!.GetDistritos()).ToList();
        PropertiesLookup = await imoveisService!.GetPropertiesAsLookupTables();
    }

    protected async void onChangeDistrito(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupTableVM> args)
    {
        idxDistrito = args.Value;
        distritoSelected = true;
        Concelhos = (await service!.GetConcelhosByDistrito(idxDistrito)).ToList();
        StateHasChanged();
    }
    protected void onChangeConcelho(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, Concelho> args)
    {
        if (args.Value == 0) return;

        idxConcelho = args.Value;
        coeficiente = args.ItemData.Coeficiente;
        StateHasChanged();
    }
    protected void onChangeTipoImovel(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, LookupTableVM> args)
    {
        idxTipoImovel = args.Value;
        StateHasChanged();
    }

    protected async Task onChangeProperty(ChangeEventArgs<int, LookupTableVM> args)
    {
        idxProperty = args.Value;
        UnitsLookup = new();
        Units = (await fracoesService!.GetFracoes_Imovel(idxProperty)).ToList();
        foreach (var unit in Units)
        {
            UnitsLookup!.Add(
                 new LookupTableVM { Id = unit.Id, Descricao = unit.Descricao });
        }
        ShowUnitsCombo = true;
    }
    protected async Task onChangeUnit(ChangeEventArgs<int, LookupTableVM> args)
    {
        if (args.Value < 1) return;
        var unit = await fracoesService.GetFracao_ById(args.Value);
        valorPatrimonio = unit.ValorUltAvaliacao;

    }

    protected void Clear()
    {
        idxProperty = 0;
        idxDistrito = 0;
        idxTipoImovel = 0;
        ShowUnitsCombo = false;
        HideResults = true;
        valorPatrimonio = 0;
        valorIMI = 0;
    }

    protected void Calculate()
    {
        coefCaption = $"{coeficiente:F2}%";
        valorIMI = Math.Round(valorPatrimonio * (decimal)coeficiente, 2);
        HideResults = false;
    }

    protected class IMIResults
    {
        public decimal ValPatrimonio { get; set; }
        public string? Descricao { get; set; }
        public double Coeficiente { get; set; }
        public decimal ValorPagar { get; set; }
    }

}
<style type="text/css" scoped>
    .card {
        height: 100%;
    }

    .e-round-corner {
        border-radius: 12px;
    }

    .text-align-right. {
        text-align: end;
    }

</style>