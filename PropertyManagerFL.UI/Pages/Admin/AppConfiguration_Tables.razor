@typeparam TModel


@using System.Collections;
@using System.Collections.Generic
@using System.Linq
@using System.Dynamic
@using Microsoft.AspNetCore.Identity
@using PropertyManagerFL.Application.Interfaces.Services.Common
@using PropertyManagerFL.Application.Shared.Enums

@inject ILookupTableService lookupTablesService


@inject NavigationManager NavManager

@inherits PropertyManagerFL.UI.Pages.ComponentsBase.TabAuxBase

@attribute [Authorize]

<PageTitle>@L["TituloGestaoTabelas"]</PageTitle>
@* <PageTitleComponent PageTitle="@L["TituloGestaoTabelas"]" WithBadge="true" PageSubTitle="@PageTitle"></PageTitleComponent> *@

<ConfigurationTablesView Items="@ItemsList"
                         TItem="TModel"
                         OnInsert="InsertRecord"
                         OnUpdate="UpdateRecord"
                         OnDelete="DeleteRecord"
                         OnRefresh="HandleRefreshData"
                         PageTitle="@PageTitle"
                         ValidateDelete="IsDescriptionInUse"
                         TextPropertyName="Descricao"
                         ValuePropertyName="Codigo">
</ConfigurationTablesView>

<AlertMessage Message="@alertMessage" MessageType="@messageType" />


    @code {

    // private int Id;
    private string? Descricao;

    [CascadingParameter]
    protected Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected System.Security.Claims.ClaimsPrincipal CurrentUser;

    [Parameter] public string? WorkTableName { get; set; }
    [Parameter] public string? PageTitle { get; set; }
    [Parameter] public string? FkFieldNameToValidate { get; set; }
    [Parameter] public string? ChildTableToValidate { get; set; }

    [Parameter] public List<TModel>? ItemsList { get; set; }

    protected bool AlertVisibility = false;
    protected string alertMessage = "";
    AppDefinitions.AlertMessageType messageType;

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask!).User;

        //userLoggedIn = _UserManager.GetUserId(CurrentUser);
    }

    protected async Task InsertRecord(TModel record)
    {
        Descricao = ItemText(record);
        var entryExists = await lookupTablesService.CheckIfRecordExist(Descricao, WorkTableName!);
        if (!entryExists)
        {
            var resultOk = await lookupTablesService.CriaNovoRegisto(Descricao, WorkTableName!); // Generic Insert operation
            if (resultOk)
            {
                var insertedId = await lookupTablesService.GetLastInsertedId(WorkTableName!);
                await HandleRefreshData();
            }
            else
            {
                AlertVisibility = true;
                alertMessage = "Nova entrada - Erro na inserção! Verifique, p.f.";
                messageType = AppDefinitions.AlertMessageType.Error;
                StateHasChanged();
            }
        }
        else
        {
            AlertVisibility = true;
            alertMessage = $"Nova entrada ({Descricao}) já existe na base de dados!";
            messageType = AppDefinitions.AlertMessageType.Warning;
            StateHasChanged();
        }
    }

    protected async Task UpdateRecord(TModel model)
    {
        Id = ItemValue(model);
        Descricao = ItemText(model);

        var updateOk = await lookupTablesService.ActualizaDetalhes(Id, Descricao, WorkTableName!); // Generic Update operation
        if (updateOk)
        {
            await HandleRefreshData();
        }
        else
        {
            AlertVisibility = true;
            alertMessage = "Alteração - Entrada já existe na base de dados!";
            messageType = AppDefinitions.AlertMessageType.Warning;
            StateHasChanged();
        }

    }

    protected async Task DeleteRecord(TModel model)
    {
        Id = ItemValue(model);
        var deleteOk = await lookupTablesService.DeleteRegisto(Id, WorkTableName!); // Generic Delete operation
        if (deleteOk)
        {
            await HandleRefreshData();
        }
        else
        {

            AlertVisibility = true;
            alertMessage = "Apagar entrada - Erro ao apagar registo!";
            messageType = AppDefinitions.AlertMessageType.Error;
            StateHasChanged();
        }

    }

    protected void SelectRecord(TModel model)
    {
        Id = ItemValue(model);
        Descricao = ItemText(model);
    }


    protected async Task HandleRefreshData()
    {
        ItemsList = (await GetDataGenerics<ExpandoObject>(WorkTableName!)).Cast<TModel>().ToList(); // Refresh ItemsList param
        StateHasChanged();
    }

    protected bool IsDescriptionInUse(TModel model)
    {
        if (!string.IsNullOrEmpty(ChildTableToValidate))
        {
            int Id = ItemValue(model);
            bool inUse = Task.Run(async () => await lookupTablesService!.CheckFKInUse(Id, FkFieldNameToValidate!, ChildTableToValidate)).Result;
            return !inUse;
        }
        else
        {
            return true;
        }
    }

    protected string[] GetFieldNames(TModel Item)
    {
        if (Item is ExpandoObject)
        {
            IDictionary<string, object> dictionary_object = (Item as ExpandoObject);
            return dictionary_object!.Keys.ToArray();
        }
        else
        {
            var tipo = typeof(TModel);
            var p = tipo.GetProperties();

            string[] fieldNames = typeof(TModel)
            .GetProperties()
            .Select(p => p.Name)
            .ToArray();

            return fieldNames;
        }
    }

    private int ItemValue(TModel Item)
    {
        if (Item is ExpandoObject)
        {
            IDictionary<string, object> dictionary_object = (Item as ExpandoObject);
            return (int)dictionary_object["Codigo"];
        }
        else
        {
            string IdField = GetFieldNames(Item)[0];
            return (int)Item.GetType()
            .GetProperty(IdField)
            .GetValue(Item, null);
        }
    }

    private string ItemText(TModel Item)
    {
        if (Item is ExpandoObject)
        {
            IDictionary<string, object> dictionary_object = (Item as ExpandoObject);
            return (string)dictionary_object["Descricao"];
        }
        else
        {
            string DescriptionField = GetFieldNames(Item)[1];

            var output = Item?.GetType()?.GetProperty(DescriptionField)
            .GetValue(Item, null);

            string sRet = output?.ToString() ?? ""; // == null ? "" : output.ToString();
            return sRet;
        }
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/admin/configapptables");
    }
}

<style>
    .e-back-icon:before {
        content: "\e728";
    }
</style>
