@using PropertyManagerFL.Application.Interfaces.Services.AppManager;
@using PropertyManagerFL.Application.Interfaces.Services.Common;
@using PropertyManagerFL.Core.Entities;
@using PropertyManagerFL.Application.ViewModels.Despesas;
@using PropertyManagerFL.Application.ViewModels.LookupTables;
@using PropertyManagerFL.Application.ViewModels.Recebimentos;
@using PropertyManagerFL.Application.ViewModels.TipoDespesa;
@using PropertyManagerFL.Application.ViewModels.TipoRecebimento;
@using static PropertyManagerFL.Application.Shared.Enums.AppDefinitions;

<div>
    <HeaderDialogComponent HeaderCaption="@L["TituloProcessamentoRendas"]" ImageName="payment" />
    <hr style="color:black">
</div>
<div class="container-fluid">
    <EditForm Model="@SelectedRecord">
        <div class="form-group">
            <AlertMessage Message="@L["TituloPagamentoRenda"]" MessageType="AlertMessageType.Info"></AlertMessage>
        </div>
        <div class="form-group">
            <SfTextBox CssClass="custom-class" Readonly=true Placeholder="@L["TituloMovimento"]" FloatLabelType=FloatLabelType.Always
                       Width="120"
                       Value="@SelectedRecord?.DataMovimento.ToShortDateString()"></SfTextBox>
        </div>
        <div>
            <SfTextBox Readonly="true" Placeholder="@L["TituloImovel"]" FloatLabelType="FloatLabelType.Always"
                       Value="@SelectedRecord?.Imovel"></SfTextBox>
        </div>
        <div>
            <SfTextBox Readonly="true" Placeholder="@L["TituloInquilino"]" FloatLabelType="FloatLabelType.Always"
                       Value="@SelectedRecord?.Inquilino"></SfTextBox>
        </div>
        @if (SelectedRecord?.DataMovimento.Date != ultimoPagamentoRenda.Date)
        {
            <div>
                <SfTextBox CssClass="custom-class" Readonly="true" Placeholder="@L["TituloUltimoPagamento"]" FloatLabelType="FloatLabelType.Always"
                       Width="120"
                       Value="@ultimoPagamentoRenda.ToShortDateString()"></SfTextBox>
            </div>
        }
        <div class="display-amounts">
            <SfTextBox Readonly="true" CssClass="custom-class" Placeholder="@L["TituloValorPrevisto"]" FloatLabelType="FloatLabelType.Always" Value="@SelectedRecord?.ValorPrevisto.ToString("C2")"></SfTextBox>
            <SfTextBox Readonly="true" CssClass="custom-class" Placeholder="@L["TituloValorRecebido"]" FloatLabelType="FloatLabelType.Always" Value="@SelectedRecord?.ValorRecebido.ToString("C2")"></SfTextBox>
            <SfTextBox Readonly="true" CssClass="custom-class" Placeholder="@L["TituloEmFalta"]" FloatLabelType="FloatLabelType.Always" Value="@SelectedRecord?.ValorEmFalta.ToString("C2")"></SfTextBox>
        </div>

        <div class="form-group mt-2">
            <SfNumericTextBox Placeholder="@L["TituloValorPago"]" @bind-Value="@SelectedRecord.ValorRecebido"
                              Format="C2" FloatLabelType="FloatLabelType.Always"
                              TValue="decimal"
                              Width="150px"                              
                              Decimals="2" Step="10"
                              ShowSpinButton=true
                              Currency="EUR">
                <NumericTextBoxEvents TValue="decimal" ValueChange="(e => onAmountChanged(e))"></NumericTextBoxEvents>
            </SfNumericTextBox>
        </div>
        <div class="form-group mt-3">
            <SfTextBox Multiline=true Placeholder="@L["TituloNotas"]"
                       HtmlAttributes="NotesAttribute"
                       CssClass="e-field e-corner"
                       FloatLabelType="FloatLabelType.Always"
                       @bind-Value="@SelectedRecord.Notas">
            </SfTextBox>
        </div>
    </EditForm>
</div>

<ValidateErrorComponent Visible="@ErrorVisibility" DialogTitle="@L["TituloRecebimentos"]"
                        ValidationMessages="@ValidationsMessages"
                        OnCloseDialog="@(()=>ErrorVisibility = false)" />

<AlertUserComponent AlertMessageType="AlertMessageType.Warning"
                    Title="@AlertTitle"
                    OperationType="OpcoesRegisto.Warning"
                    Visibility="@AlertVisibility"
                    Message="@WarningMessage"
                    OnCloseDialog="(()=>AlertVisibility=false)"></AlertUserComponent>

@code {

    [Inject] public IArrendamentoService? ArrendamentosService { get; set; }
    [Inject] IRecebimentoService? RecebimentosService { get; set; }
    [Inject] protected IStringLocalizer<App>? L { get; set; }

    [Parameter] public RecebimentoVM? SelectedRecord { get; set; }
    [Parameter] public string? HeaderCaption { get; set; }

    protected int idxTipoRecebimento;
    protected int idxFracao;

    protected decimal ValorRenda { get; set; }
    protected decimal ValorEmFalta { get; set; }
    protected bool PagamentoRenda { get; set; }

    protected int idTipoRecebimento;
    protected int idFracao;
    protected int idInquilino;
    protected string nomeInquilino = "";
    protected DateTime ultimoPagamentoRenda = DateTime.MinValue;
    protected bool EnableValue;
    protected bool HideTenantName;
    protected bool HideComboTipoRecebimento = true;

    protected decimal MaxValueAllowed { get; set; }
    protected decimal ValueReceived { get; set; }

    protected DateTime transactionDate { get; set; } = DateTime.Now;

    protected bool ErrorVisibility { get; set; } = false;
    protected List<string> ValidationsMessages = new();

    protected bool AlertVisibility { get; set; } = false;
    protected string? AlertTitle = "";

    protected bool WarningVisibility { get; set; }
    protected string? WarningMessage { get; set; }


    protected Dictionary<string, object> NotesAttribute = new Dictionary<string, object>()
    {
            {"rows", "3" }
    };

    protected override void OnInitialized()
    {
        idFracao = SelectedRecord.ID_Propriedade;
        EnableValue = false;
        HideTenantName = true;
        PagamentoRenda = true;
        ValorRenda = 0;
        ValorEmFalta = 0;
    }
    protected override async Task OnParametersSetAsync()
    {
        PagamentoRenda = SelectedRecord.Renda;

        ValorRenda = SelectedRecord!.ValorRecebido;
        ValorEmFalta = SelectedRecord.ValorEmFalta;
        ultimoPagamentoRenda = await ArrendamentosService!.GetLastPaymentDate(SelectedRecord.ID_Propriedade);
        ValueReceived = SelectedRecord!.ValorRecebido;
    }



    protected void onAmountChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<decimal> args)
    {
        var inputAmount = args.Value;
        if (inputAmount >= SelectedRecord!.ValorPrevisto)
        {
            AlertVisibility = true;
            AlertTitle = L["TituloValorRecebidoAlterado"];
            WarningMessage = $"{L["TituloValorMaximoPermitido"]} {SelectedRecord.ValorPrevisto - 1} {L["TituloUltrapassado"]}. {L["TituloVerificar"]}";
            StateHasChanged();
            return;
        }

        if (SelectedRecord?.ValorPrevisto != inputAmount)
        {
            SelectedRecord!.ValorRecebido = inputAmount;
            SelectedRecord!.ValorEmFalta = SelectedRecord.ValorPrevisto - inputAmount;
            SelectedRecord.Estado = 2; // pago parcialmente
        }
        else
        {
            SelectedRecord.Estado = 3; // pago na totalidade
            SelectedRecord!.ValorEmFalta = 0;
            SelectedRecord!.ValorRecebido = inputAmount;
        }
        StateHasChanged();
    }
}

<style>
    .display-amounts {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 3px;
    }

    .custom-class.e-control-wrapper .e-textbox {
        text-align: center;
    }

    .right-align.e-control-wrapper .e-textbox {
        text-align: right;
    }
</style>
