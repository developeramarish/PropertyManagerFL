@page "/updaterentvalue/{Id:int}"
@using PropertyManagerFL.Application.Interfaces.Services.AppManager;
@using static PropertyManagerFL.Application.Shared.Enums.AppDefinitions;

<div>
    <HeaderDialogComponent HeaderCaption="@L["TituloAtualizacaoRendas"]" ImageName="payment" />
    <hr style="color:black">
</div>

<div class="container-fluid">
    <div class="my-2">
        <SfMessage Severity="MessageSeverity.Info">@TenantName.Trim('"')</SfMessage>

        @*        <SfTextBox CssClass="custom-class" Readonly=true Placeholder="@L["TituloInquilino"]" FloatLabelType=FloatLabelType.Always
        Value=@TenantName></SfTextBox>
        *@
    </div>

    <div class="e-amounts">
        <div class="form-group mt-2">
                <SfNumericTextBox Placeholder="@L["TituloValorCorrente"]" @bind-Value="@CurrentRentValue"
                              Format="C2" FloatLabelType="FloatLabelType.Always"
                              TValue="decimal"
                              Readonly="true"
                              ShowSpinButton=false
                              Width="100px"
                              Currency="EUR">
            </SfNumericTextBox>
        </div>
        <div class="form-group mt-2 mb-4">
                <SfNumericTextBox Placeholder="@L["TituloNovoValor"]" @bind-Value="@NewRentValue"
                              Format="C2" FloatLabelType="FloatLabelType.Always"
                              TValue="decimal"
                              Width="130px"
                              Decimals="2" Step="1"
                              ShowSpinButton=true
                              Currency="EUR">
                <NumericTextBoxEvents TValue="decimal" ValueChange="(e => onAmountChanged(e))"></NumericTextBoxEvents>
            </SfNumericTextBox>
        </div>

    </div>
    <hr class="my-2" style="color:black" />
    <div class="flex-buttons-right">
        <SfButton CssClass="e-primary e-round-corner" IconCss="fas fa-save"
                  @onclick="InvokeSave" Content="@L["btnSalvar"]">
        </SfButton>
        <SfButton CssClass="e-outline e-round-corner" IconCss="fas fa-times"
                  @onclick="InvokeCancel" Content="@L["BtnSalir"]">
        </SfButton>
    </div>

</div>

<AlertUserComponent AlertMessageType="AlertMessageType.Warning"
                    Title="@AlertTitle"
                    OperationType="OpcoesRegisto.Warning"
                    Visibility="@AlertVisibility"
                    Message="@WarningMessage"
                    OnCloseDialog="(()=>AlertVisibility=false)"></AlertUserComponent>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback<decimal> OnTenantRentChange { get; set; }


    [Inject] public IInquilinoService InquilinoService { get; set; }
    [Inject] public IConfiguration _env { get; set; }
    [Inject] public IStringLocalizer<App> L { get; set; }

    protected decimal CurrentRentValue { get; set; }
    protected decimal NewRentValue { get; set; }
    protected bool AutomaticRentAdjustment { get; set; }
    protected string TenantName { get; set; } = "";

    protected bool AlertVisibility { get; set; } = false;
    protected string? AlertTitle = "";

    protected bool WarningVisibility { get; set; }
    protected string? WarningMessage { get; set; }

    decimal InputAmount = 0;


    protected override async Task OnParametersSetAsync()
    {
        TenantName = await InquilinoService.GetNomeInquilino(Id);
        CurrentRentValue = await InquilinoService.GetTenantRent(Id);
        NewRentValue = CurrentRentValue;
    }

    private async Task InvokeSave()
    {
        AlertTitle = "Alteração do valor da renda";
        if (InputAmount == 0)
        {
            AlertVisibility = true;
            WarningMessage = "Valor não foi alterado";
            StateHasChanged();
            return;
        }

        if (InputAmount < CurrentRentValue)
        {
            AlertVisibility = true;
            WarningMessage = "Valor não pode ser inferior ao corrente";
            StateHasChanged();
            return;
        }
        var maxValueAllowed = CurrentRentValue * 1.1M; // 10 %
        if (NewRentValue > maxValueAllowed)
        {
            AlertVisibility = true;
            WarningMessage = "Valor não pode ser superior a 10% do valor corrente";
            StateHasChanged();
            return;
        }

        await OnTenantRentChange.InvokeAsync(NewRentValue);
    }
    private async Task InvokeCancel()
    {
        await OnTenantRentChange.InvokeAsync(-1);
    }
    protected void onAmountChanged(Syncfusion.Blazor.Inputs.ChangeEventArgs<decimal> args)
    {
        InputAmount = args.Value;
    }
}

<style type="text/css" scoped>
    .flex-buttons-right {
        display: flex;
        align-items: end;
        justify-content: end;
        gap: 6px;
        margin: 4px;
    }

    .e-amounts {
        display: flex;
        align-items: start;
        justify-content: start;
        gap: 12px;
        margin: 4px;
    }
</style>
