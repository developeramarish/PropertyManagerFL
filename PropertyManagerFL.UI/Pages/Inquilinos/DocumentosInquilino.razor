@using PropertyManagerFL.Application.Interfaces.Services.AppManager
@using PropertyManagerFL.Application.ViewModels.Inquilinos
@using PropertyManagerFL.UI.Pages.ComponentsBase
@using static PropertyManagerFL.Application.Shared.Enums.AppDefinitions

@inherits InquilinosBase


<div>
    <HeaderDialogComponent HeaderCaption="@HeaderCaption"
                           ImageName="home-owner" />
</div>
<hr style="color:black" />
<div>
    <div class="m-2 p-2">
        <SfMessage ShowIcon="true" Severity="MessageSeverity.Info" Variant="MessageVariant.Outlined">@nomeInquilino</SfMessage>
    </div>
</div>

<div>
    <EditForm Model="@Document" style="margin:auto;padding:5px;">
        <div class="row">
            @if (EditMode == OpcoesRegisto.Inserir)
            {
                <div class="form-group mt-3">
                    <SfUploader ID="UploadFiles" @ref="sfUploader" AutoUpload=true
                                DropArea=".control-fluid"
                                AllowMultiple=false AllowedExtensions=" .docx, .pdf"
                                MaxFileSize="@MaxFileSize">
                        <UploaderAsyncSettings SaveUrl="api/uploadtenantdocuments/Save"
                                               RemoveUrl="api/uploadtenantdocuments/remove" />
                        <UploaderEvents OnActionComplete="@OnActionCompleteHandler" />
                    </SfUploader>
                </div>
            }
            <div hidden="@string.IsNullOrEmpty(Document!.DocumentPath)" class="form-group mt-2">
                <div class="d-flex justify-content-between align-items-center gap-2">
                    <SfTextBox Enabled="false"
                               Placeholder="@L["TituloData"]"
                               CssClass="form-control  e-corner"
                               FloatLabelType="@FloatLabelType.Auto"
                               Value="@Document!.ReferralDate.ToShortDateString()">
                    </SfTextBox>
                    <SfTextBox Enabled="false"
                               Placeholder="Storage folder"
                               CssClass="form-control  e-corner"
                               FloatLabelType="@FloatLabelType.Auto"
                               Value="@Document!.StorageFolder">
                    </SfTextBox>
                </div>
                <div>
                    <SfTextBox Enabled="false"
                               Placeholder="@L["TituloDocumento"]"
                               CssClass="form-control  e-corner"
                               FloatLabelType="@FloatLabelType.Auto"
                               Value="@Document!.DocumentPath">
                    </SfTextBox>
                </div>
                <div>
                    <SfTextBox Placeholder="@L["rbtDescricao"]"
                               CssClass="form-control"
                               FloatLabelType="@FloatLabelType.Auto"
                               @bind-Value="@Document!.Descricao">
                    </SfTextBox>
                </div>
            </div>

        </div>
    </EditForm>

</div>

@code {
    [Inject] public IInquilinoService inquilinoService { get; set; }

    [Parameter] public DocumentoInquilinoVM? Document { get; set; }
    [Parameter] public string? HeaderCaption { get; set; }
    [Parameter] public OpcoesRegisto EditMode { get; set; }

    protected string nomeInquilino = "";

    protected string? PathDocumento;

    protected SfUploader? sfUploader;

    protected override async Task OnParametersSetAsync()
    {
        nomeInquilino = await inquilinoService.GetNomeInquilino(Document!.TenantId);
        nomeInquilino = nomeInquilino.Replace('"', ' ');
    }

    private void OnActionCompleteHandler(Syncfusion.Blazor.Inputs.ActionCompleteEventArgs args)
    {
        if (args.FileData.Count() == 0) return;

        try
        {
            foreach (var file in args.FileData)
            {
                Document!.DocumentPath = file.Name;
            }

        }
        catch (Exception)
        {
            throw;
        }
        StateHasChanged();
    }
}
