@page "/messages"

@using EmailService
@using Microsoft.AspNetCore.Identity
@using PropertyManagerFL.Application.Interfaces.Services.AppManager;
@using PropertyManagerFL.Application.ViewModels.Email;
@using PropertyManagerFL.Application.ViewModels.LookupTables;
@using PropertyManagerFL.Application.ViewModels.Messages;

<h1>Communication</h1>
@if (_messages is null && InquilinosLookup is null)
{
    <LoadingData />
}
else
{
    <div class="accordion" id="accordionPanelsStayOpenExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="panelsStayOpen-headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">
                    Message...
                </button>
            </h2>
            <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingOne">
                <div class="accordion-body">
                    <div class="row">
                        <div class="col-md-6 offset-2">
                            <EditForm Model=@_message>
                                @*<input type="hidden" id="AppUserId" name="AppUserId" asp-for="AppUserId" />*@
                                <div class="group-box g-5">
                                    <div class="mb-1">
                                        <SfRadioButton Name="options" Label="Recebida do inquilino" Value="1" CssClass="p-2" TChecked="string" @bind-Checked=@SentReceivedBy
                                                   ValueChange="HandleMessageType"
                                                   LabelPosition="Syncfusion.Blazor.Buttons.LabelPosition.After"></SfRadioButton>
                                        <SfRadioButton Name="options" Label="Enviada ao inquilino" Value="2" CssClass="p-2" TChecked="string" @bind-Checked=@SentReceivedBy
                                                   ValueChange="HandleMessageType"
                                                   LabelPosition="Syncfusion.Blazor.Buttons.LabelPosition.After"></SfRadioButton>
                                        <SfRadioButton Name="options" Label="Outro Recebimento" Value="3" CssClass="p-2" TChecked="string" @bind-Checked=@SentReceivedBy
                                                   ValueChange="HandleMessageType"
                                                   LabelPosition="Syncfusion.Blazor.Buttons.LabelPosition.After"></SfRadioButton>
                                        <SfRadioButton Name="options" Label="Outro Envio" Value="4" CssClass="p-2" TChecked="string" @bind-Checked=@SentReceivedBy
                                                   ValueChange="HandleMessageType"
                                                   LabelPosition="Syncfusion.Blazor.Buttons.LabelPosition.After"></SfRadioButton>
                                    </div>
                                </div>
                                <div>
                                    <div class="w-50 mb-1" hidden="@(ShowTenantsCombo == false)">
                                        <SfDropDownList TValue="int" TItem="LookupTableVM" AllowFiltering="true"
                                                    ShowClearButton="true" Enabled="@ShowTenantsCombo" @bind-Value=@TenantId
                                                    FilterBarPlaceholder="@L["msgSelect"]" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains"
                                                    Placeholder="@comboPlaceHolder" FloatLabelType="FloatLabelType.Always"
                                                    DataSource="@InquilinosLookup">
                                            <DropDownListTemplates TItem="LookupTableVM">
                                            </DropDownListTemplates>
                                            <DropDownListEvents TValue="int" TItem="LookupTableVM" ValueChange="onChangeTenant"></DropDownListEvents>
                                            <DropDownListFieldSettings Value="Id" Text="Descricao"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                </div>
                                <div hidden="@(ShowSenderReceiver == false)">
                                    <label asp-for="DestinationEmail" class="form-label">@senderReceiverLabel</label>
                                    <div class="group-box my-1">
                                        <SfTextBox Type="InputType.Email"
                                               @bind-Value="@_message!.DestinationEmail"
                                               ID="recipientEmail" CssClass="form-control" Placeholder="email@provider.com" />

                                        <SfDatePicker Width="150px"
                                                  FloatLabelType="FloatLabelType.Always"
                                                  Min="@DateTime.Now.Date.AddDays(-30)"
                                                  Max="@DateTime.Now.Date"
                                                  @bind-Value="@MessageDate">
                                            <DatePickerEvents ValueChange="MessageDateChanged" TValue="DateTime"></DatePickerEvents>
                                        </SfDatePicker>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label asp-for="SubjectTitle">Assunto</label>
                                    <SfTextBox Type="InputType.Text"
                                           @bind-Value="@_message!.SubjectTitle"
                                           CssClass="form-control" Placeholder="Assunto" />
                                </div>
                                <div class="my-3">
                                    <label asp-for="MessageContent">Mensagem</label>
                                    <SfTextBox Multiline="true" Type="InputType.Text" ID="message"
                                           @bind-Value="@_message!.MessageContent"
                                           CssClass="form-control" Placeholder="Mensagem" />
                                </div>

                                <div class="form-group">
                                    <label class="example-label">Referência</label>
                                    <SfAutoComplete TValue="string" TItem="ComposeMessageVM" Placeholder="e.g. Ref#..." DataSource="@_messages" Autofill=true @bind-Value="@_message.ReferenceId">
                                        <AutoCompleteFieldSettings Value="ReferenceId" />
                                    </SfAutoComplete>
                                </div>
                                <div class="group-box">
                                    <div class="form-group mt-2">
                                        <SfButton CssClass="e-btn e-outline e-success" IconCss="fas fa-save"
                                              Content="Guarda mensagem" OnClick="(()=>SendMessage(1))" />
                                        <SfButton CssClass="e-btn e-outline e-warning" IconCss="fas fa-paper-plane"
                                              Content="Guarda mensagem e envia email" OnClick="(()=>SendMessage(2))" />
                                        <SfButton CssClass="e-btn e-outline e-secondary" IconCss="fas fa-times"
                                              Content="Cancelar" OnClick="GotoIndex" />
                                    </div>
                                </div>
                            </EditForm>
                        </div>
                        <div class="my-2 w-50">
                            <SfMessage Visible="@ShowResultMessage" Variant="MessageVariant.Filled" Severity="@messageSeverity">@ResultMessage</SfMessage>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="panelsStayOpen-headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="false" aria-controls="panelsStayOpen-collapseTwo">
                    Messages received...
                </button>
            </h2>
            <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingTwo">
                <div class="accordion-body">
                    <div class="album py-5 bg-light">
                        <div class="container">
                            <h2 class="display-4 fw-normal"></h2>
                            <hr />
                            <div class="d-flex table table-striped">
                                <SfGrid DataSource="@_receivedMessages"
                                    TValue="ComposeMessageVM"
                                    EnableStickyHeader="true"
                                    EnableAltRow="true"
                                    EnableHover="true"
                                    AllowFiltering="false"
                                    AllowSelection="true"
                                    AllowGrouping="false"
                                    AllowPaging="true"
                                    AllowSorting="true"
                                    AllowPdfExport="true"
                                    RowHeight="32"
                                    Toolbar="@(new List<string>() { "Edit", "Delete", "Update", "Cancel" })"
                                    AllowTextWrap="true">
                                    <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"
                                                  ShowDeleteConfirmDialog="true"></GridEditSettings>
                                    <GridEvents OnActionComplete="CRUD_Handler" TValue="ComposeMessageVM"></GridEvents>
                                    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>

                                    <GridColumns>
                                        <GridColumn Field=@nameof(ComposeMessageVM.MessageId) Visible=false IsPrimaryKey="true"></GridColumn>
                                        <GridColumn Field=@nameof(ComposeMessageVM.MessageReceivedOn) EditType="EditType.DatePickerEdit"
                                                HeaderText="Receção" Format="d" Width="90"></GridColumn>
                                        <GridColumn AllowEditing="false" HeaderText="Inquilino" Width="80" TextAlign="TextAlign.Center">
                                            <Template Context="msgCtx">
                                                @{
                                                    var msg = (msgCtx as ComposeMessageVM);
                                                    <span>@(msg?.TenantId > 0 ? "X" : "")</span>
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn Field=@nameof(ComposeMessageVM.SenderEmail) AllowEditing="false" HeaderText="Remetente" Width="200"></GridColumn>
                                        <GridColumn Field=@nameof(ComposeMessageVM.SubjectTitle) HeaderText="Assunto" Width="200"></GridColumn>
                                        <GridColumn Field=@nameof(ComposeMessageVM.MessageContent) HeaderText="Mensagem" Width="300"></GridColumn>
                                        <GridColumn Field=@nameof(ComposeMessageVM.ReferenceId) HeaderText="Referência" Width="80"></GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="panelsStayOpen-headingThree">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseThree" aria-expanded="false" aria-controls="panelsStayOpen-collapseThree">
                    Messages sent...
                </button>
            </h2>
            <div id="panelsStayOpen-collapseThree" class="accordion-collapse collapse" aria-labelledby="panelsStayOpen-headingThree">
                <div class="accordion-body">
                    <div class="album py-5 bg-light">
                        <div class="container">
                            <h2 class="display-4 fw-normal"></h2>
                            <hr />
                            <div class="container-fluid">
                                <div class="d-flex">
                                    <SfGrid DataSource="@_sentMessages"
                                        TValue="ComposeMessageVM"
                                        EnableStickyHeader="true"
                                        EnableAltRow="true"
                                        EnableHover="true"
                                        AllowFiltering="false"
                                        AllowSelection="true"
                                        AllowGrouping="false"
                                        AllowPaging="true"
                                        AllowSorting="true"
                                        AllowPdfExport="true"
                                        Toolbar="@(new List<string>() { "Edit", "Delete", "Update", "Cancel" })"
                                        RowHeight="32"
                                        AllowTextWrap="true">
                                        <GridEditSettings AllowAdding="false" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"
                                                      ShowDeleteConfirmDialog="true"></GridEditSettings>
                                        <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single"></GridSelectionSettings>
                                        <GridEvents OnActionComplete="CRUD_Handler" TValue="ComposeMessageVM"></GridEvents>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(ComposeMessageVM.MessageId) Visible=false IsPrimaryKey="true"></GridColumn>
                                            <GridColumn Field=@nameof(ComposeMessageVM.MessageSentOn) EditType="EditType.DatePickerEdit"
                                                    HeaderText="Envio" Width="90" Format="d"></GridColumn>
                                            <GridColumn Field=@nameof(ComposeMessageVM.DestinationEmail) AllowEditing="false"
                                                    HeaderText="Destinatário" Width="200"></GridColumn>
                                            <GridColumn Field=@nameof(ComposeMessageVM.SubjectTitle) HeaderText="Assunto" Width="200"></GridColumn>
                                            <GridColumn Field=@nameof(ComposeMessageVM.MessageContent) HeaderText="Mensagem" Width="300"></GridColumn>
                                            <GridColumn Field=@nameof(ComposeMessageVM.ReferenceId) HeaderText="Referência" Width="80"></GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
}
@code {

    [Inject] IMessagesService? MessagesService { get; set; }
    [Inject] IEmailSender? EmailService { get; set; }
    [Inject] UserManager<IdentityUser>? UserManager { get; set; }
    [Inject] NavigationManager? NavigationManager { get; set; }
    [Inject] public IInquilinoService? inquilinosService { get; set; }
    [Inject] public IStringLocalizer<App>? L { get; set; }
    [Inject] public IConfiguration? Config { get; set; }

    [CascadingParameter]
    protected Task<AuthenticationState>? authenticationStateTask { get; set; }

    protected IEnumerable<ComposeMessageVM>? _messages { get; set; }
    protected List<ComposeMessageVM>? _receivedMessages { get; set; }
    protected List<ComposeMessageVM>? _sentMessages { get; set; }
    protected ComposeMessageVM? _message { get; set; } = new ComposeMessageVM();
    protected System.Security.Claims.ClaimsPrincipal? CurrentUser;

    protected IEnumerable<LookupTableVM>? InquilinosLookup { get; set; }

    protected string email = "";
    protected int TenantId;
    protected string senderReceiverLabel = "";

    protected string ResultMessage = "";
    protected string TenantEmail = "";
    protected bool ShowResultMessage;
    protected bool ShowTenantEmailMessage;
    protected bool ShowTenantsCombo;
    protected bool ShowSenderReceiver;
    protected string SentReceivedBy = "0";
    protected IdentityUser? user;
    protected MessageSeverity messageSeverity { get; set; }

    protected int selectedOption;
    protected string comboPlaceHolder = "";
    protected DateTime MessageDate { get; set; }

    protected string? TenantName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        senderReceiverLabel = "";
        ShowTenantsCombo = false;
        ShowTenantEmailMessage = false;
        ShowResultMessage = false;
        ShowSenderReceiver = false;
        ResultMessage = "";
        TenantId = 0;

        //SentReceivedBy = "1";
        MessageDate = DateTime.Now.Date;

        await GetTenants();
        CurrentUser = (await authenticationStateTask!).User;
        user = await UserManager.FindByNameAsync(CurrentUser?.Identity?.Name);
        email = user.Email; 
        email = "fauxtix.luix@gmail.com"; // para teste
        await GetMessages();
    }

    protected async Task SendMessage(int opcao)
    {
        List<string> validationMessages = new();
        ResultMessage = "";

        if (selectedOption == 0)
            validationMessages.Add("Não escolheu opção");
        else if (selectedOption < 3 && _message.TenantId == 0)
            validationMessages.Add("Escolha Inquilino");
        else if (string.IsNullOrEmpty(_message!.SubjectTitle))
            validationMessages.Add("Assunto em falta");
        else if (string.IsNullOrEmpty(_message!.MessageContent))
            validationMessages.Add("Mensagem em falta");
        else if (string.IsNullOrEmpty(_message!.SenderEmail))
            validationMessages.Add("Remetente em falta");
        else if (string.IsNullOrEmpty(_message!.DestinationEmail))
            validationMessages.Add("Destinatário em falta");

        {
            if (validationMessages.Any())
            {
                foreach (var item in validationMessages)
                {
                    ResultMessage += item;
                }
                ShowResultMessage = true;
                messageSeverity = MessageSeverity.Warning;
                return;
            }
        }

        ShowResultMessage = false;
        ResultMessage = "";

        if (_message is not null)
        {
            if (MessagesService is not null)
            {
                if (TenantId == 0) // a msg a enviar não tem inquilino como origem
                {
                    _message.MessageSentOn = DateTime.UtcNow;
                    _message.SenderEmail = email; // user email logged in
                    _message.MessageType = 2; // Sent by user logged in
                }
                var success = await MessagesService.Add(_message);
                if (success)
                {
                    if (opcao == 2)
                    {
                        if (_message.MessageType == 2 || _message.MessageType == 4)
                        {
                            var recipient = _message.DestinationEmail;
                            if (string.IsNullOrEmpty(recipient))
                            {
                                ShowResultMessage = true;
                                messageSeverity = MessageSeverity.Warning;
                                ResultMessage = "e-mail não informado!";
                                StateHasChanged();
                                return;
                            }
                            bool validEmail = EmailService!.IsValidEmail(recipient);
                            if (validEmail)
                            {
                                var emailMessage = new EmailService.Message(new string[]
                                    {_message.SenderEmail },
                                    _message.SubjectTitle,
                                    _message.MessageContent, TenantName!, null);

                                await EmailService.SendEmailAsync(emailMessage);
                            }
                        }
                    }


                    ResultMessage = "Mensagem enviada com sucesso";
                    messageSeverity = MessageSeverity.Success;
                    ShowResultMessage = true;
                }
                else
                {
                    ResultMessage = "Erro ao criar mensagem. Verifique log, p.f..";
                    messageSeverity = MessageSeverity.Error;
                    ShowResultMessage = true;
                }
            }
            else
            {
                ResultMessage = "Erro no processo. Contacte Admin.";
                messageSeverity = MessageSeverity.Error;
                ShowResultMessage = true;
            }
        }
        StateHasChanged();
        _message = new();

        await GetMessages();

        StateHasChanged();
    }

    protected async Task onChangeTenant(ChangeEventArgs<int, LookupTableVM> args)
    {
        TenantId = args.Value;
        _message!.TenantId = TenantId;
        ResultMessage = "";
        ShowResultMessage = false;
        ShowTenantEmailMessage = false;
        var tenant = await inquilinosService!.GetInquilino_ById(TenantId);
        TenantEmail = tenant.eMail ?? "";
        TenantName = tenant.Nome;

        if (!string.IsNullOrEmpty(TenantEmail))
        {
            if (selectedOption == 1) // enviada ao inquilino
            {
                _message!.SenderEmail = TenantEmail;
                _message.DestinationEmail = email;
            }
            else // recebida do inquilino
            {
                _message!.SenderEmail = email;
                _message.DestinationEmail = TenantEmail;
            }

        }
        else
        {
            TenantEmail = "E-mail não consta dos dados do inquilino...";
            messageSeverity = MessageSeverity.Warning;
            _message!.SenderEmail = "NoEmailInformed@propertyManager.pt";
            _message.DestinationEmail = email;
            ShowTenantEmailMessage = true;
            StateHasChanged();
        }

    }

    protected void HandleMessageType(ChangeArgs<string> args)
    {
        SentReceivedBy = args.Value;

        selectedOption = int.Parse(SentReceivedBy);

        _message.MessageType = selectedOption;
        _message.TenantId = 0;

        ShowSenderReceiver = true;

        switch (selectedOption)
        {
            case 1:
                senderReceiverLabel = "e-Mail do Destinatário";
                comboPlaceHolder = "Remetente";
                ShowTenantsCombo = true;
                ShowResultMessage = false;
                _message.MessageReceivedOn = DateTime.UtcNow;
                _message!.DestinationEmail = email;
                break;
            case 2: // enviada ao inquilino
                senderReceiverLabel = "e-Mail do Destinatário";
                comboPlaceHolder = "Destinatário";

                ShowTenantsCombo = true;
                ShowResultMessage = false;
                _message.MessageSentOn = DateTime.UtcNow;
                _message!.SenderEmail = email;
                _message!.DestinationEmail = "";

                break;
            case 3:
                senderReceiverLabel = "e-Mail do Remetente";
                _message.MessageReceivedOn = DateTime.UtcNow;
                ShowTenantsCombo = false;
                _message!.DestinationEmail = email;
                break;
            case 4:
                senderReceiverLabel = "e-Mail do Destinatário";
                ShowTenantsCombo = false; ;
                _message.MessageSentOn = DateTime.UtcNow;
                _message!.DestinationEmail = "";
                break;
        }

        StateHasChanged();
    }

    protected void GotoIndex()
    {
        NavigationManager.NavigateTo("/");
    }

    protected async Task GetMessages()
    {
        _messages = await MessagesService.GetAllMessages();
        _receivedMessages = _messages.Where(p => p.MessageType == 1 || p.MessageType == 3).ToList();
        _sentMessages = _messages.Where(p => p.MessageType == 2 || p.MessageType == 4).ToList();

        StateHasChanged();
    }

    protected void MessageDateChanged(ChangedEventArgs<DateTime> args)
    {

        if (_message?.MessageType == 1 || _message?.MessageType == 3)
        {
            _message.MessageReceivedOn = MessageDate;
        }
        else
        {
            _message!.MessageSentOn = MessageDate;
        }
    }

    protected async Task GetTenants()
    {
        InquilinosLookup = (await inquilinosService!.GetInquilinosAsLookup()).ToList();
    }

    public async Task CRUD_Handler(Syncfusion.Blazor.Grids.ActionEventArgs<ComposeMessageVM> args)
    {
        ShowResultMessage = false;
        ResultMessage = "";

        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            var data = args.Data;
            var messageId = data.MessageId;

            var updateOk = await MessagesService!.Save(messageId, data);
            if (updateOk)
            {
                ResultMessage = "Mensagem atualizada com sucesso";
                messageSeverity = MessageSeverity.Success;
                ShowResultMessage = true;
            }
            else
            {
                ResultMessage = "Erro na atualização da mensagem";
                messageSeverity = MessageSeverity.Error;
                ShowResultMessage = true;
                await GetMessages();
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            // Triggers once cancel operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            var data = args.Data;
            var messageId = data.MessageId;
            var deleteOk = await MessagesService!.Delete(messageId);
            if (deleteOk)
            {
                ResultMessage = "Mensagem apagada com sucesso";
                messageSeverity = MessageSeverity.Success;
                ShowResultMessage = true;
                await GetMessages();
            }
            else
            {
                ResultMessage = "Erro ao apagar mensagem";
                messageSeverity = MessageSeverity.Error;
                ShowResultMessage = true;
            }

        }

    }
}
<style>
    .example-label {
        font-size: 14px;
        margin-bottom: 6px;
    }
</style>